
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_corruption.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorial_corruption.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_corruption.py:


Corrupting Images with TorchUncertainty to Benchmark Robustness
===============================================================

This tutorial shows the impact of the different corruption transforms available in the
TorchUncertainty library. These corruption transforms were first proposed in the paper
Benchmarking Neural Network Robustness to Common Corruptions and Perturbations
by Dan Hendrycks and Thomas Dietterich.

For this tutorial, we will only load the corruption transforms available in 
torch_uncertainty.transforms.corruption. We also need to load utilities from
torchvision and matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 15-61

.. code-block:: Python

    from torchvision.datasets import CIFAR10
    from torchvision.transforms import Compose, ToTensor, Resize

    import matplotlib.pyplot as plt

    ds = CIFAR10("./data", train=False, download=True)


    def get_images(main_corruption, index: int = 0):
        """Create an image showing the 6 levels of corruption of a given transform."""
        images = []
        for severity in range(6):
            ds_transforms = Compose(
                [ToTensor(), main_corruption(severity), Resize(256, antialias=True)]
            )
            ds = CIFAR10("./data", train=False, download=False, transform=ds_transforms)
            images.append(ds[index][0].permute(1, 2, 0).numpy())
        return images


    def show_images(transforms):
        """Show the effect of all given transforms."""
        num_corruptions = len(transforms)
        _, ax = plt.subplots(num_corruptions, 6, figsize=(10, int(1.5 * num_corruptions)))
        for i, transform in enumerate(transforms):
            images = get_images(transform, index=i)
            ax[i][0].text(
                -0.1,
                0.5,
                transform.__name__,
                transform=ax[i][0].transAxes,
                rotation="vertical",
                horizontalalignment="right",
                verticalalignment="center",
                fontsize=12,
            )
            for j in range(6):
                ax[i][j].imshow(images[j])
                if i == 0 and j == 0:
                    ax[i][j].set_title("Original")
                elif i == 0:
                    ax[i][j].set_title(f"Severity {j}")
                ax[i][j].axis("off")
        plt.show()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz
      0%|          | 0/170498071 [00:00<?, ?it/s]      1%|          | 1671168/170498071 [00:00<00:10, 16579080.68it/s]      7%|▋         | 12582912/170498071 [00:00<00:02, 70749816.08it/s]     13%|█▎        | 22052864/170498071 [00:00<00:01, 81589660.74it/s]     19%|█▉        | 32899072/170498071 [00:00<00:01, 92154904.88it/s]     25%|██▍       | 42139648/170498071 [00:00<00:01, 91934684.74it/s]     31%|███       | 52887552/170498071 [00:00<00:01, 97143642.16it/s]     37%|███▋      | 62619648/170498071 [00:00<00:01, 95108094.07it/s]     42%|████▏     | 72155136/170498071 [00:00<00:01, 93586072.97it/s]     48%|████▊     | 81526784/170498071 [00:00<00:00, 89277162.56it/s]     53%|█████▎    | 90505216/170498071 [00:01<00:01, 79881633.87it/s]     58%|█████▊    | 98697216/170498071 [00:01<00:00, 75773166.24it/s]     63%|██████▎   | 106823680/170498071 [00:01<00:00, 77166287.17it/s]     67%|██████▋   | 114655232/170498071 [00:01<00:00, 74107234.45it/s]     72%|███████▏  | 122159104/170498071 [00:01<00:00, 73380705.85it/s]     76%|███████▌  | 129564672/170498071 [00:01<00:00, 71947587.87it/s]     80%|████████  | 136806400/170498071 [00:01<00:00, 70341528.65it/s]     85%|████████▍ | 144441344/170498071 [00:01<00:00, 72014823.46it/s]     89%|████████▉ | 151683072/170498071 [00:01<00:00, 69227551.56it/s]     93%|█████████▎| 158793728/170498071 [00:02<00:00, 69635746.09it/s]     97%|█████████▋| 165969920/170498071 [00:02<00:00, 70141278.00it/s]    100%|██████████| 170498071/170498071 [00:02<00:00, 77223501.09it/s]
    Extracting ./data/cifar-10-python.tar.gz to ./data




.. GENERATED FROM PYTHON SOURCE LINES 62-64

1. Noise Corruptions
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 64-80

.. code-block:: Python

    from torch_uncertainty.transforms.corruption import (
        GaussianNoise,
        ShotNoise,
        ImpulseNoise,
        SpeckleNoise,
    )

    show_images(
        [
            GaussianNoise,
            ShotNoise,
            ImpulseNoise,
            SpeckleNoise,
        ]
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_corruption_001.png
   :alt: Original, Severity 1, Severity 2, Severity 3, Severity 4, Severity 5
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_corruption_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-83

2. Blur Corruptions
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 83-97

.. code-block:: Python

    from torch_uncertainty.transforms.corruption import (
        GaussianBlur,
        GlassBlur,
        DefocusBlur,
    )

    show_images(
        [
            GaussianBlur,
            GlassBlur,
            DefocusBlur,
        ]
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_corruption_002.png
   :alt: Original, Severity 1, Severity 2, Severity 3, Severity 4, Severity 5
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_corruption_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-100

3. Other Corruptions
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 100-114

.. code-block:: Python

    from torch_uncertainty.transforms.corruption import (
        JPEGCompression,
        Pixelate,
        Frost,
    )

    show_images(
        [
            JPEGCompression,
            Pixelate,
            Frost,
        ]
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_corruption_003.png
   :alt: Original, Severity 1, Severity 2, Severity 3, Severity 4, Severity 5
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_corruption_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://zenodo.org/records/10438904/files/frost.zip to data/frost.zip
      0%|          | 0/1780178 [00:00<?, ?it/s]      4%|▎         | 65536/1780178 [00:00<00:04, 348121.66it/s]     13%|█▎        | 229376/1780178 [00:00<00:02, 658609.52it/s]     48%|████▊     | 851968/1780178 [00:00<00:00, 1881586.40it/s]    100%|██████████| 1780178/1780178 [00:00<00:00, 2719097.98it/s]
    Extracting data/frost.zip to data




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Reference
---------

- **Benchmarking Neural Network Robustness to Common Corruptions and Perturbations**, Dan Hendrycks and Thomas Dietterich. `ICLR 2019 <https://arxiv.org/pdf/1903.12261>`_.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 24.961 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_corruption.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_corruption.ipynb <tutorial_corruption.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_corruption.py <tutorial_corruption.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: tutorial_corruption.zip <tutorial_corruption.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
