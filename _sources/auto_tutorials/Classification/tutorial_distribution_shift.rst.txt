
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/Classification/tutorial_distribution_shift.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_Classification_tutorial_distribution_shift.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_Classification_tutorial_distribution_shift.py:


Evaluating Model Performance Under Distribution Shift with TorchUncertainty
===========================================================================

In this tutorial, we explore how to assess a model's robustness when faced with distribution shifts.
Specifically, we will:

- Shortly train a **ResNet18** model on the standard **CIFAR-10** dataset.
- Evaluate its performance on both the original CIFAR-10 test set and a corrupted version of CIFAR-10 to simulate distribution shift.
- Analyze the model's performance and robustness under these conditions.

By the end of this tutorial, you will understand how to use TorchUncertainty to evaluate and interpret model behavior under distribution shifts.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

Imports and Setup
-----------------

First, we need to import the necessary libraries and set up our environment.
This includes importing PyTorch, TorchUncertainty components, and TorchUncertainty's Trainer (built on top of Lightning's).

.. GENERATED FROM PYTHON SOURCE LINES 22-30

.. code-block:: Python


    from torch import nn, optim

    from torch_uncertainty import TUTrainer
    from torch_uncertainty.datamodules import CIFAR10DataModule
    from torch_uncertainty.models.classification.resnet import resnet
    from torch_uncertainty.routines.classification import ClassificationRoutine








.. GENERATED FROM PYTHON SOURCE LINES 31-39

DataModule Setup
----------------

TorchUncertainty provides convenient DataModules for standard datasets like CIFAR-10.
DataModules handle data loading, preprocessing, and batching, simplifying the data pipeline. Each datamodule
also include the corresponding out-of-distribution and distribution shift datasets, which are then used by the routine.
For CIFAR-10, the corresponding distribution-shift dataset is CIFAR-10C as used in the community.
To enable Distribution Shift evaluation, activate the `eval_shift` flag as done below.

.. GENERATED FROM PYTHON SOURCE LINES 39-49

.. code-block:: Python


    # Initialize the CIFAR-10 DataModule
    datamodule = CIFAR10DataModule(
        root="./data",
        batch_size=512,
        num_workers=8,
        eval_shift=True,
        shift_severity=5,  # Set severity level of the corruption (1 to 5): max-strength!
    )








.. GENERATED FROM PYTHON SOURCE LINES 50-59

CIFAR-10C
---------

CIFAR-10C is a transformed version of CIFAR-10 test set. Dan Hendrycks and Thomas Dietterich applied computer vision
transforms, known as corruptions to degrade the quality of the image and test deep learning models in adverse conditions.
There are 15 (+4 optional) corruptions in total, including noise, blur, weather effects, etc. Each corruption has 5 different
levels of severity ranging from small corruptions to very strong effects on the image. You can set the desired corruption level with
the shift-severity argument. We refer to [1] for more details.
You can get a more detailed overview and examples of the corruptions on the corresponding tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 59-68

.. code-block:: Python


    # These lines are usually not necessary (they are called by the Trainer),
    # but we want to get access to the dataset before training
    datamodule.prepare_data()
    datamodule.setup("test")

    # Let's check the CIFAR-10C, it should contain (15+4)*10000 images for the selected severity level.
    print(datamodule.shift)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0.00/170M [00:00<?, ?B/s]      0%|          | 65.5k/170M [00:00<07:14, 392kB/s]      0%|          | 229k/170M [00:00<03:49, 741kB/s]       0%|          | 623k/170M [00:00<01:54, 1.48MB/s]      1%|          | 1.41M/170M [00:00<00:54, 3.08MB/s]      1%|          | 2.13M/170M [00:00<00:43, 3.91MB/s]      3%|▎         | 4.39M/170M [00:00<00:19, 8.39MB/s]      4%|▎         | 6.26M/170M [00:01<00:15, 10.3MB/s]      6%|▌         | 10.3M/170M [00:01<00:08, 18.2MB/s]      8%|▊         | 14.5M/170M [00:01<00:06, 24.5MB/s]     11%|█         | 18.2M/170M [00:01<00:05, 28.0MB/s]     13%|█▎        | 22.7M/170M [00:01<00:05, 29.3MB/s]     16%|█▌        | 27.2M/170M [00:01<00:04, 33.6MB/s]     18%|█▊        | 30.8M/170M [00:01<00:04, 33.6MB/s]     21%|██        | 35.4M/170M [00:01<00:03, 37.1MB/s]     23%|██▎       | 39.2M/170M [00:01<00:03, 33.8MB/s]     25%|██▌       | 42.7M/170M [00:01<00:03, 33.8MB/s]     27%|██▋       | 46.4M/170M [00:02<00:03, 34.1MB/s]     29%|██▉       | 49.9M/170M [00:02<00:03, 34.3MB/s]     31%|███▏      | 53.5M/170M [00:02<00:03, 34.8MB/s]     33%|███▎      | 57.0M/170M [00:02<00:03, 32.4MB/s]     35%|███▌      | 60.4M/170M [00:02<00:03, 32.7MB/s]     38%|███▊      | 64.1M/170M [00:02<00:03, 33.4MB/s]     40%|███▉      | 67.5M/170M [00:02<00:03, 33.8MB/s]     42%|████▏     | 70.9M/170M [00:02<00:02, 33.8MB/s]     44%|████▎     | 74.4M/170M [00:02<00:03, 31.8MB/s]     46%|████▌     | 78.0M/170M [00:03<00:02, 32.7MB/s]     48%|████▊     | 81.7M/170M [00:03<00:02, 33.9MB/s]     50%|████▉     | 85.1M/170M [00:03<00:02, 33.4MB/s]     52%|█████▏    | 88.6M/170M [00:03<00:02, 33.8MB/s]     54%|█████▍    | 92.0M/170M [00:03<00:02, 32.1MB/s]     56%|█████▌    | 95.6M/170M [00:03<00:02, 32.8MB/s]     58%|█████▊    | 99.3M/170M [00:03<00:02, 33.9MB/s]     60%|██████    | 103M/170M [00:03<00:02, 33.4MB/s]      62%|██████▏   | 106M/170M [00:03<00:01, 33.6MB/s]     64%|██████▍   | 110M/170M [00:04<00:01, 32.1MB/s]     66%|██████▋   | 113M/170M [00:04<00:01, 32.8MB/s]     69%|██████▊   | 117M/170M [00:04<00:01, 33.7MB/s]     71%|███████   | 120M/170M [00:04<00:01, 33.5MB/s]     73%|███████▎  | 125M/170M [00:04<00:01, 32.4MB/s]     76%|███████▌  | 129M/170M [00:04<00:01, 36.1MB/s]     78%|███████▊  | 133M/170M [00:04<00:01, 35.3MB/s]     81%|████████  | 137M/170M [00:04<00:00, 34.0MB/s]     83%|████████▎ | 142M/170M [00:04<00:00, 37.1MB/s]     85%|████████▌ | 146M/170M [00:05<00:00, 36.2MB/s]     88%|████████▊ | 150M/170M [00:05<00:00, 34.8MB/s]     91%|█████████ | 155M/170M [00:05<00:00, 37.8MB/s]     93%|█████████▎| 159M/170M [00:05<00:00, 36.7MB/s]     95%|█████████▌| 163M/170M [00:05<00:00, 34.8MB/s]     98%|█████████▊| 167M/170M [00:05<00:00, 37.7MB/s]    100%|██████████| 170M/170M [00:05<00:00, 29.9MB/s]
      0%|          | 0.00/2.92G [00:00<?, ?B/s]      0%|          | 819k/2.92G [00:00<06:22, 7.63MB/s]      0%|          | 1.77M/2.92G [00:00<05:46, 8.41MB/s]      0%|          | 2.62M/2.92G [00:00<05:46, 8.42MB/s]      0%|          | 3.74M/2.92G [00:00<05:52, 8.27MB/s]      0%|          | 4.59M/2.92G [00:00<09:14, 5.25MB/s]      0%|          | 5.24M/2.92G [00:00<10:30, 4.62MB/s]      0%|          | 6.00M/2.92G [00:01<15:00, 3.24MB/s]      0%|          | 7.41M/2.92G [00:01<09:50, 4.93MB/s]      0%|          | 14.1M/2.92G [00:01<02:57, 16.3MB/s]      1%|          | 25.4M/2.92G [00:01<01:19, 36.3MB/s]      1%|▏         | 37.1M/2.92G [00:01<00:52, 54.8MB/s]      2%|▏         | 46.9M/2.92G [00:01<00:44, 65.2MB/s]      2%|▏         | 55.9M/2.92G [00:01<00:39, 71.7MB/s]      2%|▏         | 64.2M/2.92G [00:02<00:43, 65.8MB/s]      3%|▎         | 75.5M/2.92G [00:02<00:36, 77.7MB/s]      3%|▎         | 84.1M/2.92G [00:02<00:37, 76.1MB/s]      3%|▎         | 94.0M/2.92G [00:02<00:34, 82.2MB/s]      4%|▎         | 106M/2.92G [00:02<00:30, 91.9MB/s]       4%|▍         | 118M/2.92G [00:02<00:28, 99.1MB/s]      4%|▍         | 128M/2.92G [00:02<00:27, 102MB/s]       5%|▍         | 139M/2.92G [00:03<00:56, 49.3MB/s]      5%|▌         | 147M/2.92G [00:03<01:04, 43.0MB/s]      5%|▌         | 153M/2.92G [00:03<01:10, 39.2MB/s]      5%|▌         | 159M/2.92G [00:03<01:18, 35.3MB/s]      6%|▌         | 164M/2.92G [00:03<01:11, 38.4MB/s]      6%|▌         | 171M/2.92G [00:04<01:02, 44.1MB/s]      6%|▌         | 178M/2.92G [00:04<00:56, 48.4MB/s]      6%|▋         | 184M/2.92G [00:04<00:52, 51.8MB/s]      7%|▋         | 190M/2.92G [00:04<00:51, 52.8MB/s]      7%|▋         | 197M/2.92G [00:04<00:47, 56.7MB/s]      7%|▋         | 203M/2.92G [00:04<00:46, 58.1MB/s]      7%|▋         | 210M/2.92G [00:04<00:47, 56.7MB/s]      7%|▋         | 216M/2.92G [00:04<00:46, 58.4MB/s]      8%|▊         | 222M/2.92G [00:04<00:46, 58.4MB/s]      8%|▊         | 228M/2.92G [00:04<00:44, 59.9MB/s]      8%|▊         | 236M/2.92G [00:05<00:41, 64.4MB/s]      8%|▊         | 243M/2.92G [00:05<00:39, 67.4MB/s]      9%|▊         | 251M/2.92G [00:05<00:38, 69.3MB/s]      9%|▉         | 258M/2.92G [00:05<00:39, 66.8MB/s]      9%|▉         | 265M/2.92G [00:05<00:39, 67.1MB/s]      9%|▉         | 272M/2.92G [00:05<00:38, 68.9MB/s]     10%|▉         | 279M/2.92G [00:05<00:38, 69.1MB/s]     10%|▉         | 286M/2.92G [00:05<00:38, 69.2MB/s]     10%|█         | 293M/2.92G [00:05<00:37, 70.2MB/s]     10%|█         | 300M/2.92G [00:06<00:38, 67.9MB/s]     11%|█         | 307M/2.92G [00:06<00:37, 68.9MB/s]     11%|█         | 314M/2.92G [00:06<00:38, 67.0MB/s]     11%|█         | 321M/2.92G [00:06<00:42, 61.6MB/s]     11%|█         | 328M/2.92G [00:06<00:41, 63.1MB/s]     11%|█▏        | 335M/2.92G [00:06<00:39, 65.4MB/s]     12%|█▏        | 342M/2.92G [00:06<00:38, 66.9MB/s]     12%|█▏        | 349M/2.92G [00:06<00:37, 67.7MB/s]     12%|█▏        | 356M/2.92G [00:06<00:37, 68.2MB/s]     12%|█▏        | 363M/2.92G [00:06<00:37, 68.4MB/s]     13%|█▎        | 370M/2.92G [00:07<00:39, 64.3MB/s]     13%|█▎        | 377M/2.92G [00:07<00:38, 66.1MB/s]     13%|█▎        | 384M/2.92G [00:07<00:38, 66.5MB/s]     13%|█▎        | 391M/2.92G [00:07<00:39, 64.4MB/s]     14%|█▎        | 398M/2.92G [00:07<00:38, 65.9MB/s]     14%|█▍        | 406M/2.92G [00:07<00:36, 69.1MB/s]     14%|█▍        | 413M/2.92G [00:07<00:36, 69.3MB/s]     14%|█▍        | 420M/2.92G [00:07<00:35, 70.1MB/s]     15%|█▍        | 427M/2.92G [00:07<00:35, 70.2MB/s]     15%|█▍        | 434M/2.92G [00:08<00:35, 69.4MB/s]     15%|█▌        | 441M/2.92G [00:08<00:37, 66.9MB/s]     15%|█▌        | 448M/2.92G [00:08<00:38, 64.9MB/s]     16%|█▌        | 454M/2.92G [00:08<00:38, 63.9MB/s]     16%|█▌        | 461M/2.92G [00:08<00:38, 63.8MB/s]     16%|█▌        | 467M/2.92G [00:08<00:39, 62.4MB/s]     16%|█▌        | 473M/2.92G [00:08<00:39, 62.3MB/s]     16%|█▋        | 480M/2.92G [00:08<00:38, 63.2MB/s]     17%|█▋        | 486M/2.92G [00:08<00:38, 63.0MB/s]     17%|█▋        | 493M/2.92G [00:08<00:37, 63.9MB/s]     17%|█▋        | 499M/2.92G [00:09<00:38, 62.9MB/s]     17%|█▋        | 506M/2.92G [00:09<00:38, 63.4MB/s]     18%|█▊        | 512M/2.92G [00:09<00:38, 62.6MB/s]     18%|█▊        | 519M/2.92G [00:09<00:37, 63.3MB/s]     18%|█▊        | 526M/2.92G [00:09<00:36, 65.5MB/s]     18%|█▊        | 532M/2.92G [00:09<00:37, 63.7MB/s]     18%|█▊        | 539M/2.92G [00:09<00:37, 63.8MB/s]     19%|█▊        | 546M/2.92G [00:09<00:36, 65.9MB/s]     19%|█▉        | 553M/2.92G [00:09<00:35, 67.3MB/s]     19%|█▉        | 560M/2.92G [00:09<00:34, 67.7MB/s]     19%|█▉        | 567M/2.92G [00:10<00:34, 67.7MB/s]     20%|█▉        | 574M/2.92G [00:10<00:35, 65.2MB/s]     20%|█▉        | 580M/2.92G [00:10<00:36, 64.9MB/s]     20%|██        | 587M/2.92G [00:10<00:35, 66.4MB/s]     20%|██        | 594M/2.92G [00:10<00:34, 66.8MB/s]     21%|██        | 601M/2.92G [00:10<00:34, 67.7MB/s]     21%|██        | 608M/2.92G [00:10<00:33, 68.7MB/s]     21%|██        | 616M/2.92G [00:10<00:32, 71.5MB/s]     21%|██▏       | 623M/2.92G [00:10<00:31, 71.8MB/s]     22%|██▏       | 631M/2.92G [00:11<00:35, 63.8MB/s]     22%|██▏       | 637M/2.92G [00:11<00:36, 62.3MB/s]     22%|██▏       | 644M/2.92G [00:11<00:36, 61.8MB/s]     22%|██▏       | 650M/2.92G [00:11<00:36, 61.4MB/s]     22%|██▏       | 656M/2.92G [00:11<00:37, 61.0MB/s]     23%|██▎       | 662M/2.92G [00:11<00:36, 61.5MB/s]     23%|██▎       | 669M/2.92G [00:11<00:36, 61.5MB/s]     23%|██▎       | 675M/2.92G [00:11<00:36, 61.5MB/s]     23%|██▎       | 681M/2.92G [00:11<00:36, 62.1MB/s]     24%|██▎       | 688M/2.92G [00:11<00:35, 62.6MB/s]     24%|██▍       | 694M/2.92G [00:12<00:36, 61.8MB/s]     24%|██▍       | 701M/2.92G [00:12<00:35, 63.1MB/s]     24%|██▍       | 707M/2.92G [00:12<00:35, 62.5MB/s]     24%|██▍       | 713M/2.92G [00:12<00:35, 61.7MB/s]     25%|██▍       | 720M/2.92G [00:12<00:34, 62.9MB/s]     25%|██▍       | 727M/2.92G [00:12<00:34, 64.0MB/s]     25%|██▌       | 733M/2.92G [00:12<00:34, 63.7MB/s]     25%|██▌       | 740M/2.92G [00:12<00:33, 65.3MB/s]     26%|██▌       | 747M/2.92G [00:12<00:33, 65.7MB/s]     26%|██▌       | 753M/2.92G [00:12<00:32, 65.9MB/s]     26%|██▌       | 760M/2.92G [00:13<00:32, 66.7MB/s]     26%|██▋       | 767M/2.92G [00:13<00:31, 68.0MB/s]     27%|██▋       | 775M/2.92G [00:13<00:30, 69.2MB/s]     27%|██▋       | 782M/2.92G [00:13<00:30, 69.5MB/s]     27%|██▋       | 789M/2.92G [00:13<00:31, 66.6MB/s]     27%|██▋       | 795M/2.92G [00:13<00:32, 65.9MB/s]     28%|██▊       | 803M/2.92G [00:13<00:31, 67.9MB/s]     28%|██▊       | 810M/2.92G [00:13<00:29, 70.3MB/s]     28%|██▊       | 818M/2.92G [00:13<00:29, 70.4MB/s]     28%|██▊       | 825M/2.92G [00:14<00:29, 70.3MB/s]     28%|██▊       | 832M/2.92G [00:14<00:29, 70.1MB/s]     29%|██▊       | 839M/2.92G [00:14<00:30, 68.6MB/s]     29%|██▉       | 846M/2.92G [00:14<00:29, 69.6MB/s]     29%|██▉       | 853M/2.92G [00:14<00:30, 68.0MB/s]     29%|██▉       | 860M/2.92G [00:14<00:30, 67.3MB/s]     30%|██▉       | 867M/2.92G [00:14<00:30, 67.9MB/s]     30%|██▉       | 874M/2.92G [00:14<00:29, 68.5MB/s]     30%|███       | 881M/2.92G [00:14<00:29, 70.0MB/s]     30%|███       | 888M/2.92G [00:14<00:28, 70.4MB/s]     31%|███       | 895M/2.92G [00:15<00:28, 70.7MB/s]     31%|███       | 903M/2.92G [00:15<00:28, 71.8MB/s]     31%|███       | 910M/2.92G [00:15<00:27, 72.9MB/s]     31%|███▏      | 918M/2.92G [00:15<00:27, 74.0MB/s]     32%|███▏      | 926M/2.92G [00:15<00:27, 71.8MB/s]     32%|███▏      | 933M/2.92G [00:15<00:28, 70.0MB/s]     32%|███▏      | 940M/2.92G [00:15<00:28, 69.7MB/s]     32%|███▏      | 947M/2.92G [00:15<00:28, 69.8MB/s]     33%|███▎      | 954M/2.92G [00:15<00:27, 70.2MB/s]     33%|███▎      | 961M/2.92G [00:15<00:29, 66.1MB/s]     33%|███▎      | 968M/2.92G [00:16<00:28, 67.9MB/s]     33%|███▎      | 975M/2.92G [00:16<00:28, 67.4MB/s]     34%|███▎      | 983M/2.92G [00:16<00:28, 69.1MB/s]     34%|███▍      | 990M/2.92G [00:16<00:27, 70.5MB/s]     34%|███▍      | 997M/2.92G [00:16<00:27, 70.4MB/s]     34%|███▍      | 1.00G/2.92G [00:16<00:27, 70.5MB/s]     35%|███▍      | 1.01G/2.92G [00:16<00:28, 67.1MB/s]     35%|███▍      | 1.02G/2.92G [00:16<00:28, 66.1MB/s]     35%|███▌      | 1.02G/2.92G [00:16<00:28, 65.4MB/s]     35%|███▌      | 1.03G/2.92G [00:17<00:27, 67.4MB/s]     36%|███▌      | 1.04G/2.92G [00:17<00:27, 67.8MB/s]     36%|███▌      | 1.05G/2.92G [00:17<00:27, 67.8MB/s]     36%|███▌      | 1.05G/2.92G [00:17<00:26, 69.2MB/s]     36%|███▋      | 1.06G/2.92G [00:17<00:26, 68.9MB/s]     37%|███▋      | 1.07G/2.92G [00:17<00:27, 67.9MB/s]     37%|███▋      | 1.07G/2.92G [00:17<00:26, 68.4MB/s]     37%|███▋      | 1.08G/2.92G [00:17<00:26, 69.0MB/s]     37%|███▋      | 1.09G/2.92G [00:17<00:26, 70.2MB/s]     38%|███▊      | 1.10G/2.92G [00:17<00:25, 70.6MB/s]     38%|███▊      | 1.10G/2.92G [00:18<00:25, 70.2MB/s]     38%|███▊      | 1.11G/2.92G [00:18<00:25, 71.1MB/s]     38%|███▊      | 1.12G/2.92G [00:18<00:26, 69.2MB/s]     39%|███▊      | 1.13G/2.92G [00:18<00:25, 71.4MB/s]     39%|███▉      | 1.13G/2.92G [00:18<00:25, 71.1MB/s]     39%|███▉      | 1.14G/2.92G [00:18<00:24, 72.0MB/s]     39%|███▉      | 1.15G/2.92G [00:18<00:24, 71.8MB/s]     40%|███▉      | 1.15G/2.92G [00:18<00:24, 71.1MB/s]     40%|███▉      | 1.16G/2.92G [00:18<00:25, 68.6MB/s]     40%|████      | 1.17G/2.92G [00:18<00:26, 67.2MB/s]     40%|████      | 1.18G/2.92G [00:19<00:26, 66.7MB/s]     41%|████      | 1.18G/2.92G [00:19<00:25, 69.0MB/s]     41%|████      | 1.19G/2.92G [00:19<00:25, 66.6MB/s]     41%|████      | 1.20G/2.92G [00:19<00:25, 68.6MB/s]     41%|████▏     | 1.20G/2.92G [00:19<00:24, 69.8MB/s]     42%|████▏     | 1.21G/2.92G [00:19<00:24, 68.8MB/s]     42%|████▏     | 1.22G/2.92G [00:19<00:25, 67.9MB/s]     42%|████▏     | 1.23G/2.92G [00:19<00:24, 69.0MB/s]     42%|████▏     | 1.23G/2.92G [00:19<00:24, 69.1MB/s]     42%|████▏     | 1.24G/2.92G [00:20<00:23, 70.2MB/s]     43%|████▎     | 1.25G/2.92G [00:20<00:23, 69.9MB/s]     43%|████▎     | 1.25G/2.92G [00:20<00:24, 68.3MB/s]     43%|████▎     | 1.26G/2.92G [00:20<00:24, 66.8MB/s]     43%|████▎     | 1.27G/2.92G [00:20<00:23, 69.0MB/s]     44%|████▎     | 1.28G/2.92G [00:20<00:23, 69.5MB/s]     44%|████▍     | 1.28G/2.92G [00:20<00:23, 70.7MB/s]     44%|████▍     | 1.29G/2.92G [00:20<00:23, 70.5MB/s]     44%|████▍     | 1.30G/2.92G [00:20<00:23, 70.2MB/s]     45%|████▍     | 1.30G/2.92G [00:20<00:23, 69.4MB/s]     45%|████▍     | 1.31G/2.92G [00:21<00:22, 70.9MB/s]     45%|████▌     | 1.32G/2.92G [00:21<00:22, 71.2MB/s]     45%|████▌     | 1.33G/2.92G [00:21<00:22, 71.2MB/s]     46%|████▌     | 1.33G/2.92G [00:21<00:21, 72.7MB/s]     46%|████▌     | 1.34G/2.92G [00:21<00:22, 71.4MB/s]     46%|████▌     | 1.35G/2.92G [00:21<00:22, 71.3MB/s]     46%|████▋     | 1.36G/2.92G [00:21<00:21, 72.9MB/s]     47%|████▋     | 1.36G/2.92G [00:21<00:21, 72.5MB/s]     47%|████▋     | 1.37G/2.92G [00:21<00:21, 71.3MB/s]     47%|████▋     | 1.38G/2.92G [00:21<00:21, 71.2MB/s]     47%|████▋     | 1.38G/2.92G [00:22<00:21, 69.7MB/s]     48%|████▊     | 1.39G/2.92G [00:22<00:21, 69.6MB/s]     48%|████▊     | 1.40G/2.92G [00:22<00:22, 68.8MB/s]     48%|████▊     | 1.41G/2.92G [00:22<00:21, 69.5MB/s]     48%|████▊     | 1.41G/2.92G [00:22<00:21, 70.3MB/s]     49%|████▊     | 1.42G/2.92G [00:22<00:21, 70.1MB/s]     49%|████▉     | 1.43G/2.92G [00:22<00:22, 66.3MB/s]     49%|████▉     | 1.43G/2.92G [00:22<00:22, 65.5MB/s]     49%|████▉     | 1.44G/2.92G [00:22<00:23, 63.3MB/s]     50%|████▉     | 1.45G/2.92G [00:23<00:23, 61.5MB/s]     50%|████▉     | 1.45G/2.92G [00:23<00:24, 59.8MB/s]     50%|████▉     | 1.46G/2.92G [00:23<00:24, 59.8MB/s]     50%|█████     | 1.47G/2.92G [00:23<00:24, 60.3MB/s]     50%|█████     | 1.47G/2.92G [00:23<00:24, 60.3MB/s]     51%|█████     | 1.48G/2.92G [00:23<00:23, 61.4MB/s]     51%|█████     | 1.48G/2.92G [00:23<00:22, 62.8MB/s]     51%|█████     | 1.49G/2.92G [00:23<00:22, 64.1MB/s]     51%|█████▏    | 1.50G/2.92G [00:23<00:23, 60.5MB/s]     52%|█████▏    | 1.50G/2.92G [00:23<00:22, 62.9MB/s]     52%|█████▏    | 1.51G/2.92G [00:24<00:21, 64.9MB/s]     52%|█████▏    | 1.52G/2.92G [00:24<00:21, 65.3MB/s]     52%|█████▏    | 1.52G/2.92G [00:24<00:21, 63.9MB/s]     52%|█████▏    | 1.53G/2.92G [00:24<00:23, 59.7MB/s]     53%|█████▎    | 1.54G/2.92G [00:24<00:23, 57.6MB/s]     53%|█████▎    | 1.54G/2.92G [00:24<00:25, 55.0MB/s]     53%|█████▎    | 1.55G/2.92G [00:24<00:24, 54.9MB/s]     53%|█████▎    | 1.55G/2.92G [00:24<00:25, 54.2MB/s]     53%|█████▎    | 1.56G/2.92G [00:24<00:24, 54.5MB/s]     54%|█████▎    | 1.57G/2.92G [00:25<00:24, 55.5MB/s]     54%|█████▍    | 1.57G/2.92G [00:25<00:23, 56.3MB/s]     54%|█████▍    | 1.58G/2.92G [00:25<00:23, 56.7MB/s]     54%|█████▍    | 1.58G/2.92G [00:25<00:23, 57.0MB/s]     54%|█████▍    | 1.59G/2.92G [00:25<00:23, 57.8MB/s]     55%|█████▍    | 1.59G/2.92G [00:25<00:22, 58.4MB/s]     55%|█████▍    | 1.60G/2.92G [00:25<00:22, 58.9MB/s]     55%|█████▌    | 1.61G/2.92G [00:25<00:22, 59.3MB/s]     55%|█████▌    | 1.61G/2.92G [00:25<00:21, 60.4MB/s]     55%|█████▌    | 1.62G/2.92G [00:25<00:21, 61.0MB/s]     56%|█████▌    | 1.63G/2.92G [00:26<00:21, 60.8MB/s]     56%|█████▌    | 1.63G/2.92G [00:26<00:20, 62.2MB/s]     56%|█████▌    | 1.64G/2.92G [00:26<00:20, 62.1MB/s]     56%|█████▋    | 1.65G/2.92G [00:26<00:20, 62.9MB/s]     57%|█████▋    | 1.65G/2.92G [00:26<00:20, 62.8MB/s]     57%|█████▋    | 1.66G/2.92G [00:26<00:19, 64.1MB/s]     57%|█████▋    | 1.66G/2.92G [00:26<00:19, 64.3MB/s]     57%|█████▋    | 1.67G/2.92G [00:26<00:19, 63.6MB/s]     57%|█████▋    | 1.68G/2.92G [00:26<00:19, 63.0MB/s]     58%|█████▊    | 1.68G/2.92G [00:26<00:19, 63.9MB/s]     58%|█████▊    | 1.69G/2.92G [00:27<00:19, 63.9MB/s]     58%|█████▊    | 1.70G/2.92G [00:27<00:18, 66.5MB/s]     58%|█████▊    | 1.71G/2.92G [00:27<00:17, 67.8MB/s]     59%|█████▊    | 1.71G/2.92G [00:27<00:17, 68.7MB/s]     59%|█████▉    | 1.72G/2.92G [00:27<00:19, 61.6MB/s]     59%|█████▉    | 1.73G/2.92G [00:27<00:20, 59.3MB/s]     59%|█████▉    | 1.73G/2.92G [00:27<00:20, 57.7MB/s]     60%|█████▉    | 1.74G/2.92G [00:27<00:21, 56.1MB/s]     60%|█████▉    | 1.74G/2.92G [00:27<00:20, 56.2MB/s]     60%|█████▉    | 1.75G/2.92G [00:28<00:21, 55.6MB/s]     60%|██████    | 1.75G/2.92G [00:28<00:20, 56.5MB/s]     60%|██████    | 1.76G/2.92G [00:28<00:20, 57.6MB/s]     61%|██████    | 1.77G/2.92G [00:28<00:19, 58.4MB/s]     61%|██████    | 1.77G/2.92G [00:28<00:19, 58.6MB/s]     61%|██████    | 1.78G/2.92G [00:28<00:19, 59.2MB/s]     61%|██████    | 1.79G/2.92G [00:28<00:18, 59.7MB/s]     61%|██████▏   | 1.79G/2.92G [00:28<00:18, 60.4MB/s]     62%|██████▏   | 1.80G/2.92G [00:28<00:18, 59.6MB/s]     62%|██████▏   | 1.80G/2.92G [00:28<00:18, 61.1MB/s]     62%|██████▏   | 1.81G/2.92G [00:29<00:17, 62.5MB/s]     62%|██████▏   | 1.82G/2.92G [00:29<00:17, 63.6MB/s]     63%|██████▎   | 1.82G/2.92G [00:29<00:16, 64.5MB/s]     63%|██████▎   | 1.83G/2.92G [00:29<00:17, 63.9MB/s]     63%|██████▎   | 1.84G/2.92G [00:29<00:17, 62.8MB/s]     63%|██████▎   | 1.84G/2.92G [00:29<00:16, 64.1MB/s]     63%|██████▎   | 1.85G/2.92G [00:29<00:16, 65.4MB/s]     64%|██████▎   | 1.86G/2.92G [00:29<00:16, 65.4MB/s]     64%|██████▍   | 1.86G/2.92G [00:29<00:15, 66.9MB/s]     64%|██████▍   | 1.87G/2.92G [00:29<00:16, 63.3MB/s]     64%|██████▍   | 1.88G/2.92G [00:30<00:16, 63.6MB/s]     65%|██████▍   | 1.88G/2.92G [00:30<00:16, 64.5MB/s]     65%|██████▍   | 1.89G/2.92G [00:30<00:15, 65.8MB/s]     65%|██████▌   | 1.90G/2.92G [00:30<00:15, 65.7MB/s]     65%|██████▌   | 1.91G/2.92G [00:30<00:15, 67.3MB/s]     66%|██████▌   | 1.91G/2.92G [00:30<00:14, 68.6MB/s]     66%|██████▌   | 1.92G/2.92G [00:30<00:14, 69.0MB/s]     66%|██████▌   | 1.93G/2.92G [00:30<00:14, 67.1MB/s]     66%|██████▌   | 1.93G/2.92G [00:30<00:14, 66.7MB/s]     66%|██████▋   | 1.94G/2.92G [00:31<00:14, 68.8MB/s]     67%|██████▋   | 1.95G/2.92G [00:31<00:13, 70.9MB/s]     67%|██████▋   | 1.96G/2.92G [00:31<00:13, 71.5MB/s]     67%|██████▋   | 1.96G/2.92G [00:31<00:13, 72.7MB/s]     68%|██████▊   | 1.97G/2.92G [00:31<00:13, 72.9MB/s]     68%|██████▊   | 1.98G/2.92G [00:31<00:13, 71.7MB/s]     68%|██████▊   | 1.98G/2.92G [00:31<00:13, 66.9MB/s]     68%|██████▊   | 1.99G/2.92G [00:31<00:14, 65.4MB/s]     68%|██████▊   | 2.00G/2.92G [00:31<00:14, 65.5MB/s]     69%|██████▊   | 2.00G/2.92G [00:31<00:14, 64.1MB/s]     69%|██████▉   | 2.01G/2.92G [00:32<00:13, 65.5MB/s]     69%|██████▉   | 2.02G/2.92G [00:32<00:13, 66.2MB/s]     69%|██████▉   | 2.03G/2.92G [00:32<00:13, 68.0MB/s]     70%|██████▉   | 2.03G/2.92G [00:32<00:12, 68.4MB/s]     70%|██████▉   | 2.04G/2.92G [00:32<00:12, 70.1MB/s]     70%|███████   | 2.05G/2.92G [00:32<00:12, 71.3MB/s]     70%|███████   | 2.06G/2.92G [00:32<00:11, 72.0MB/s]     71%|███████   | 2.06G/2.92G [00:32<00:11, 71.7MB/s]     71%|███████   | 2.07G/2.92G [00:32<00:12, 70.4MB/s]     71%|███████   | 2.08G/2.92G [00:32<00:11, 70.2MB/s]     71%|███████▏  | 2.08G/2.92G [00:33<00:12, 67.7MB/s]     72%|███████▏  | 2.09G/2.92G [00:33<00:12, 67.5MB/s]     72%|███████▏  | 2.10G/2.92G [00:33<00:11, 69.4MB/s]     72%|███████▏  | 2.11G/2.92G [00:33<00:11, 70.3MB/s]     72%|███████▏  | 2.11G/2.92G [00:33<00:11, 71.2MB/s]     73%|███████▎  | 2.12G/2.92G [00:33<00:11, 72.1MB/s]     73%|███████▎  | 2.13G/2.92G [00:33<00:11, 71.4MB/s]     73%|███████▎  | 2.13G/2.92G [00:33<00:11, 68.7MB/s]     73%|███████▎  | 2.14G/2.92G [00:33<00:11, 69.1MB/s]     74%|███████▎  | 2.15G/2.92G [00:34<00:11, 68.3MB/s]     74%|███████▍  | 2.16G/2.92G [00:34<00:10, 69.4MB/s]     74%|███████▍  | 2.16G/2.92G [00:34<00:10, 70.4MB/s]     74%|███████▍  | 2.17G/2.92G [00:34<00:10, 69.3MB/s]     75%|███████▍  | 2.18G/2.92G [00:34<00:10, 69.3MB/s]     75%|███████▍  | 2.18G/2.92G [00:34<00:10, 70.4MB/s]     75%|███████▌  | 2.19G/2.92G [00:34<00:10, 70.3MB/s]     75%|███████▌  | 2.20G/2.92G [00:34<00:10, 68.9MB/s]     76%|███████▌  | 2.21G/2.92G [00:34<00:10, 70.4MB/s]     76%|███████▌  | 2.21G/2.92G [00:34<00:11, 61.0MB/s]     76%|███████▌  | 2.22G/2.92G [00:35<00:11, 59.5MB/s]     76%|███████▋  | 2.23G/2.92G [00:35<00:11, 59.7MB/s]     76%|███████▋  | 2.23G/2.92G [00:35<00:11, 60.3MB/s]     77%|███████▋  | 2.24G/2.92G [00:35<00:11, 60.9MB/s]     77%|███████▋  | 2.24G/2.92G [00:35<00:11, 60.3MB/s]     77%|███████▋  | 2.25G/2.92G [00:35<00:11, 60.3MB/s]     77%|███████▋  | 2.26G/2.92G [00:35<00:10, 61.2MB/s]     78%|███████▊  | 2.26G/2.92G [00:35<00:10, 61.3MB/s]     78%|███████▊  | 2.27G/2.92G [00:35<00:10, 62.5MB/s]     78%|███████▊  | 2.28G/2.92G [00:36<00:10, 62.0MB/s]     78%|███████▊  | 2.28G/2.92G [00:36<00:10, 63.0MB/s]     78%|███████▊  | 2.29G/2.92G [00:36<00:09, 63.6MB/s]     79%|███████▊  | 2.30G/2.92G [00:36<00:09, 65.2MB/s]     79%|███████▉  | 2.30G/2.92G [00:36<00:09, 64.9MB/s]     79%|███████▉  | 2.31G/2.92G [00:36<00:09, 66.9MB/s]     79%|███████▉  | 2.32G/2.92G [00:36<00:09, 66.7MB/s]     80%|███████▉  | 2.32G/2.92G [00:36<00:09, 65.1MB/s]     80%|███████▉  | 2.33G/2.92G [00:36<00:09, 64.3MB/s]     80%|████████  | 2.34G/2.92G [00:36<00:08, 65.7MB/s]     80%|████████  | 2.34G/2.92G [00:37<00:09, 63.7MB/s]     81%|████████  | 2.35G/2.92G [00:37<00:08, 65.4MB/s]     81%|████████  | 2.36G/2.92G [00:37<00:08, 66.4MB/s]     81%|████████  | 2.36G/2.92G [00:37<00:08, 66.2MB/s]     81%|████████  | 2.37G/2.92G [00:37<00:09, 59.9MB/s]     81%|████████▏ | 2.38G/2.92G [00:37<00:10, 52.2MB/s]     82%|████████▏ | 2.38G/2.92G [00:37<00:11, 48.5MB/s]     82%|████████▏ | 2.39G/2.92G [00:37<00:11, 46.8MB/s]     82%|████████▏ | 2.39G/2.92G [00:38<00:11, 45.6MB/s]     82%|████████▏ | 2.40G/2.92G [00:38<00:11, 45.3MB/s]     82%|████████▏ | 2.40G/2.92G [00:38<00:11, 44.8MB/s]     82%|████████▏ | 2.41G/2.92G [00:38<00:11, 44.7MB/s]     83%|████████▎ | 2.41G/2.92G [00:38<00:11, 45.0MB/s]     83%|████████▎ | 2.42G/2.92G [00:38<00:11, 45.1MB/s]     83%|████████▎ | 2.42G/2.92G [00:38<00:10, 46.2MB/s]     83%|████████▎ | 2.42G/2.92G [00:38<00:10, 47.1MB/s]     83%|████████▎ | 2.43G/2.92G [00:38<00:10, 47.9MB/s]     83%|████████▎ | 2.44G/2.92G [00:38<00:09, 48.9MB/s]     84%|████████▎ | 2.44G/2.92G [00:39<00:09, 49.9MB/s]     84%|████████▍ | 2.45G/2.92G [00:39<00:09, 50.7MB/s]     84%|████████▍ | 2.45G/2.92G [00:39<00:09, 51.3MB/s]     84%|████████▍ | 2.46G/2.92G [00:39<00:08, 52.1MB/s]     84%|████████▍ | 2.46G/2.92G [00:39<00:08, 52.9MB/s]     85%|████████▍ | 2.47G/2.92G [00:39<00:08, 53.4MB/s]     85%|████████▍ | 2.47G/2.92G [00:39<00:08, 54.3MB/s]     85%|████████▍ | 2.48G/2.92G [00:39<00:08, 54.9MB/s]     85%|████████▌ | 2.48G/2.92G [00:39<00:07, 55.9MB/s]     85%|████████▌ | 2.49G/2.92G [00:39<00:07, 55.9MB/s]     86%|████████▌ | 2.50G/2.92G [00:40<00:07, 55.8MB/s]     86%|████████▌ | 2.50G/2.92G [00:40<00:07, 56.6MB/s]     86%|████████▌ | 2.51G/2.92G [00:40<00:07, 57.2MB/s]     86%|████████▌ | 2.51G/2.92G [00:40<00:07, 57.7MB/s]     86%|████████▋ | 2.52G/2.92G [00:40<00:06, 58.6MB/s]     87%|████████▋ | 2.53G/2.92G [00:40<00:06, 60.4MB/s]     87%|████████▋ | 2.53G/2.92G [00:40<00:06, 61.4MB/s]     87%|████████▋ | 2.54G/2.92G [00:40<00:06, 61.3MB/s]     87%|████████▋ | 2.55G/2.92G [00:40<00:06, 61.8MB/s]     87%|████████▋ | 2.55G/2.92G [00:40<00:05, 61.4MB/s]     88%|████████▊ | 2.56G/2.92G [00:41<00:05, 63.1MB/s]     88%|████████▊ | 2.56G/2.92G [00:41<00:05, 64.1MB/s]     88%|████████▊ | 2.57G/2.92G [00:41<00:05, 63.2MB/s]     88%|████████▊ | 2.58G/2.92G [00:41<00:05, 63.8MB/s]     89%|████████▊ | 2.58G/2.92G [00:41<00:05, 65.8MB/s]     89%|████████▉ | 2.59G/2.92G [00:41<00:04, 66.5MB/s]     89%|████████▉ | 2.60G/2.92G [00:41<00:05, 63.5MB/s]     89%|████████▉ | 2.61G/2.92G [00:41<00:04, 64.1MB/s]     89%|████████▉ | 2.61G/2.92G [00:41<00:04, 64.6MB/s]     90%|████████▉ | 2.62G/2.92G [00:41<00:04, 65.7MB/s]     90%|████████▉ | 2.63G/2.92G [00:42<00:04, 66.4MB/s]     90%|█████████ | 2.63G/2.92G [00:42<00:04, 68.9MB/s]     90%|█████████ | 2.64G/2.92G [00:42<00:03, 70.5MB/s]     91%|█████████ | 2.65G/2.92G [00:42<00:03, 71.4MB/s]     91%|█████████ | 2.66G/2.92G [00:42<00:03, 71.8MB/s]     91%|█████████ | 2.66G/2.92G [00:42<00:03, 73.3MB/s]     91%|█████████▏| 2.67G/2.92G [00:42<00:03, 71.7MB/s]     92%|█████████▏| 2.68G/2.92G [00:42<00:03, 69.7MB/s]     92%|█████████▏| 2.68G/2.92G [00:42<00:03, 69.9MB/s]     92%|█████████▏| 2.69G/2.92G [00:42<00:03, 69.5MB/s]     92%|█████████▏| 2.70G/2.92G [00:43<00:03, 70.9MB/s]     93%|█████████▎| 2.71G/2.92G [00:43<00:02, 72.4MB/s]     93%|█████████▎| 2.71G/2.92G [00:43<00:02, 72.4MB/s]     93%|█████████▎| 2.72G/2.92G [00:43<00:02, 73.1MB/s]     94%|█████████▎| 2.73G/2.92G [00:43<00:02, 71.7MB/s]     94%|█████████▎| 2.74G/2.92G [00:43<00:02, 70.2MB/s]     94%|█████████▍| 2.74G/2.92G [00:43<00:02, 69.6MB/s]     94%|█████████▍| 2.75G/2.92G [00:43<00:02, 66.9MB/s]     94%|█████████▍| 2.76G/2.92G [00:43<00:02, 69.1MB/s]     95%|█████████▍| 2.76G/2.92G [00:44<00:02, 68.5MB/s]     95%|█████████▍| 2.77G/2.92G [00:44<00:02, 66.8MB/s]     95%|█████████▌| 2.78G/2.92G [00:44<00:02, 68.4MB/s]     95%|█████████▌| 2.79G/2.92G [00:44<00:01, 68.8MB/s]     96%|█████████▌| 2.79G/2.92G [00:44<00:01, 67.4MB/s]     96%|█████████▌| 2.80G/2.92G [00:44<00:01, 66.2MB/s]     96%|█████████▌| 2.81G/2.92G [00:44<00:01, 68.4MB/s]     96%|█████████▋| 2.81G/2.92G [00:44<00:01, 69.0MB/s]     97%|█████████▋| 2.82G/2.92G [00:44<00:01, 69.4MB/s]     97%|█████████▋| 2.83G/2.92G [00:44<00:01, 70.6MB/s]     97%|█████████▋| 2.84G/2.92G [00:45<00:01, 70.3MB/s]     97%|█████████▋| 2.84G/2.92G [00:45<00:01, 70.3MB/s]     98%|█████████▊| 2.85G/2.92G [00:45<00:00, 68.8MB/s]     98%|█████████▊| 2.86G/2.92G [00:45<00:00, 70.0MB/s]     98%|█████████▊| 2.86G/2.92G [00:45<00:00, 70.1MB/s]     98%|█████████▊| 2.87G/2.92G [00:45<00:00, 70.0MB/s]     99%|█████████▊| 2.88G/2.92G [00:45<00:00, 70.5MB/s]     99%|█████████▉| 2.89G/2.92G [00:45<00:00, 70.5MB/s]     99%|█████████▉| 2.89G/2.92G [00:45<00:00, 70.9MB/s]     99%|█████████▉| 2.90G/2.92G [00:45<00:00, 69.1MB/s]    100%|█████████▉| 2.91G/2.92G [00:46<00:00, 69.7MB/s]    100%|█████████▉| 2.91G/2.92G [00:46<00:00, 66.8MB/s]    100%|██████████| 2.92G/2.92G [00:46<00:00, 63.1MB/s]
    Dataset CIFAR10C
        Number of datapoints: 190000
        Root location: data/CIFAR-10-C
        StandardTransform
    Transform: Compose(
                     ToImage()
                     ToDtype(scale=True)
                     Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.2023, 0.1994, 0.201], inplace=False)
               )




.. GENERATED FROM PYTHON SOURCE LINES 69-74

Model Initialization
--------------------

We will use the ResNet18 architecture, a widely adopted convolutional neural network known for its deep residual learning capabilities.
The model is initialized with 10 output classes corresponding to the CIFAR-10 dataset categories.

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: Python


    # Initialize the ResNet18 model with 10 output classes
    model = resnet(arch=18, in_channels=3, num_classes=10)








.. GENERATED FROM PYTHON SOURCE LINES 79-89

Define the Classification Routine
---------------------------------

The `ClassificationRoutine` is one of the most crucial building blocks in TorchUncertainty.
It streamlines the training and evaluation processes.
It integrates the model, loss function, and optimizer into a cohesive routine compatible with PyTorch Lightning's Trainer.
This abstraction simplifies the implementation of standard training loops and evaluation protocols.
To come back to what matters in this tutorial, the routine also handles the evaluation of the performance
of the model under distribution shift detection. To enable it, activate the `eval_shift` flag. Note that you can also evaluate
the Out-of-distribution detection at the same time by also setting `eval_ood` to True.

.. GENERATED FROM PYTHON SOURCE LINES 89-101

.. code-block:: Python


    # Define the loss function: Cross-Entropy Loss for multi-class classification
    criterion = nn.CrossEntropyLoss()

    # Define the optimizer: Adam optimizer with a learning rate of 0.001
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Initialize the ClassificationRoutine with the model, number of classes, loss function, and optimizer
    routine = ClassificationRoutine(
        model=model, num_classes=10, loss=criterion, optim_recipe=optimizer, eval_shift=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 102-108

Training the Model
------------------

With the routine defined, we can now set up the TUTrainer and commence training.
The TUTrainer handles the training loop, including epoch management, logging, and checkpointing.
We specify the maximum number of epochs, the precision and the device to be used.

.. GENERATED FROM PYTHON SOURCE LINES 108-117

.. code-block:: Python


    # Initialize the TUTrainer with a maximum of 10 epochs and the specified device
    trainer = TUTrainer(
        max_epochs=10, precision="16-mixed", accelerator="cuda", devices=1, enable_progress_bar=False
    )

    # Begin training the model using the CIFAR-10 DataModule
    trainer.fit(routine, datamodule=datamodule)








.. GENERATED FROM PYTHON SOURCE LINES 118-124

Evaluating on In-Distribution and Distribution-shifted Data
-----------------------------------------------------------

Now that the model is trained, we can evaluate its performance on the original in-distribution test set,
as well as the distribution-shifted set. Typing the next line will automatically compute the in-distribution
metrics as well as their values on the distribution-shifted set.

.. GENERATED FROM PYTHON SOURCE LINES 124-128

.. code-block:: Python


    # Evaluate the trained model on the original CIFAR-10 test set and on CIFAR-10C
    results = trainer.test(routine, datamodule=datamodule)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Classification       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     Acc      │          73.780%          │
    │    Brier     │          0.37156          │
    │   Entropy    │          0.59601          │
    │     NLL      │          0.79062          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Calibration        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     ECE      │          5.372%           │
    │     aECE     │          5.372%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃ Selective Classification  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          7.145%           │
    │     AURC     │          9.907%           │
    │  Cov@5Risk   │           nan%            │
    │  Risk@80Cov  │          18.075%          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃  Distribution Shift lvl5  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          8.472%           │
    │     AURC     │          12.048%          │
    │     Acc      │          70.870%          │
    │    Brier     │          0.41013          │
    │  Cov@5Risk   │           nan%            │
    │     ECE      │          6.763%           │
    │     NLL      │          0.87891          │
    │  Risk@80Cov  │          21.094%          │
    │     aECE     │          6.761%           │
    └──────────────┴───────────────────────────┘




.. GENERATED FROM PYTHON SOURCE LINES 129-135

Distribution-shift metrics
--------------------------

The distribution shift metrics are computed only when the `eval_shift` flag of the routine is True.
In this case, the values of the metrics are shown last. They correspond to the in-distribution metrics but
computed on the distribution-shifted datasets, hence the worse results.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 53.253 seconds)


.. _sphx_glr_download_auto_tutorials_Classification_tutorial_distribution_shift.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_distribution_shift.ipynb <tutorial_distribution_shift.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_distribution_shift.py <tutorial_distribution_shift.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: tutorial_distribution_shift.zip <tutorial_distribution_shift.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
