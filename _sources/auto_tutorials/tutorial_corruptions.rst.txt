
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_corruptions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorial_corruptions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_corruptions.py:


Image Corruptions
=================

This tutorial shows the impact of the different corruptions available in the
TorchUncertainty library. These corruptions were first proposed in the paper
Benchmarking Neural Network Robustness to Common Corruptions and Perturbations
by Dan Hendrycks and Thomas Dietterich.

For this tutorial, we will only load the corruption transforms available in 
torch_uncertainty.transforms.corruptions. We also need to load utilities from
torchvision and matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 14-63

.. code-block:: Python


    import torch
    from torchvision.datasets import CIFAR10
    from torchvision.transforms import Compose, ToTensor, Resize

    from torchvision.utils import make_grid
    import matplotlib.pyplot as plt

    ds = CIFAR10("./data", train=False, download=True)


    def get_images(main_corruption, index: int = 0):
        """Create an image showing the 6 levels of corruption of a given transform."""
        images = []
        for severity in range(6):
            ds_transforms = Compose(
                [ToTensor(), main_corruption(severity), Resize(256, antialias=True)]
            )
            ds = CIFAR10("./data", train=False, download=False, transform=ds_transforms)
            images.append(ds[index][0].permute(1, 2, 0).numpy())
        return images


    def show_images(transforms):
        """Show the effect of all given transforms."""
        num_corruptions = len(transforms)
        _, ax = plt.subplots(num_corruptions, 6, figsize=(10, int(1.5 * num_corruptions)))
        for i, transform in enumerate(transforms):
            images = get_images(transform, index=i)
            ax[i][0].text(
                -0.1,
                0.5,
                transform.__name__,
                transform=ax[i][0].transAxes,
                rotation="vertical",
                horizontalalignment="right",
                verticalalignment="center",
                fontsize=12,
            )
            for j in range(6):
                ax[i][j].imshow(images[j])
                if i == 0 and j == 0:
                    ax[i][j].set_title("Original")
                elif i == 0:
                    ax[i][j].set_title(f"Severity {j}")
                ax[i][j].axis("off")
        plt.show()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz
      0%|          | 0/170498071 [00:00<?, ?it/s]      0%|          | 32768/170498071 [00:00<10:25, 272687.68it/s]      0%|          | 229376/170498071 [00:00<02:39, 1066758.39it/s]      1%|          | 884736/170498071 [00:00<00:52, 3226217.62it/s]      2%|▏         | 3538944/170498071 [00:00<00:15, 10860502.68it/s]      5%|▍         | 7929856/170498071 [00:00<00:07, 21591959.88it/s]      8%|▊         | 13074432/170498071 [00:00<00:05, 30980889.52it/s]     11%|█         | 17989632/170498071 [00:00<00:04, 36631187.84it/s]     13%|█▎        | 22806528/170498071 [00:00<00:03, 39702851.75it/s]     16%|█▌        | 27590656/170498071 [00:00<00:03, 42029883.83it/s]     19%|█▉        | 32440320/170498071 [00:01<00:03, 43800851.11it/s]     22%|██▏       | 37289984/170498071 [00:01<00:02, 45191471.08it/s]     25%|██▍       | 41844736/170498071 [00:01<00:02, 45116760.10it/s]     28%|██▊       | 47316992/170498071 [00:01<00:02, 47969966.40it/s]     31%|███       | 52166656/170498071 [00:01<00:02, 47766276.22it/s]     33%|███▎      | 56983552/170498071 [00:01<00:02, 47338336.96it/s]     36%|███▋      | 61997056/170498071 [00:01<00:02, 47386376.09it/s]     39%|███▉      | 67338240/170498071 [00:01<00:02, 48208789.08it/s]     42%|████▏     | 72187904/170498071 [00:01<00:02, 47272943.12it/s]     45%|████▌     | 77430784/170498071 [00:02<00:01, 48735192.21it/s]     48%|████▊     | 82345984/170498071 [00:02<00:01, 48855996.84it/s]     51%|█████     | 87326720/170498071 [00:02<00:01, 49068951.38it/s]     54%|█████▍    | 92405760/170498071 [00:02<00:01, 49546041.27it/s]     57%|█████▋    | 97386496/170498071 [00:02<00:01, 47458337.48it/s]     60%|█████▉    | 102170624/170498071 [00:02<00:01, 47545113.24it/s]     63%|██████▎   | 107347968/170498071 [00:02<00:01, 48779315.01it/s]     66%|██████▌   | 112263168/170498071 [00:02<00:01, 48112667.04it/s]     69%|██████▉   | 117243904/170498071 [00:02<00:01, 47246283.64it/s]     72%|███████▏  | 121995264/170498071 [00:02<00:01, 47158436.96it/s]     74%|███████▍  | 126746624/170498071 [00:03<00:00, 47087077.05it/s]     77%|███████▋  | 131465216/170498071 [00:03<00:00, 46636294.01it/s]     80%|███████▉  | 136314880/170498071 [00:03<00:00, 47142499.21it/s]     83%|████████▎ | 141492224/170498071 [00:03<00:00, 48503185.48it/s]     86%|████████▌ | 146374656/170498071 [00:03<00:00, 46845693.13it/s]     89%|████████▊ | 151158784/170498071 [00:03<00:00, 45536757.64it/s]     92%|█████████▏| 156237824/170498071 [00:03<00:00, 47027760.69it/s]     95%|█████████▍| 161251328/170498071 [00:03<00:00, 47911450.19it/s]     97%|█████████▋| 166068224/170498071 [00:03<00:00, 46693190.35it/s]    100%|██████████| 170498071/170498071 [00:03<00:00, 42939713.77it/s]
    Extracting ./data/cifar-10-python.tar.gz to ./data




.. GENERATED FROM PYTHON SOURCE LINES 64-66

1. Noise Corruptions
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 66-82

.. code-block:: Python

    from torch_uncertainty.transforms.corruptions import (
        GaussianNoise,
        ShotNoise,
        ImpulseNoise,
        SpeckleNoise,
    )

    show_images(
        [
            GaussianNoise,
            ShotNoise,
            ImpulseNoise,
            SpeckleNoise,
        ]
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_corruptions_001.png
   :alt: Original, Severity 1, Severity 2, Severity 3, Severity 4, Severity 5
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_corruptions_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-85

2. Blur Corruptions
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 85-99

.. code-block:: Python

    from torch_uncertainty.transforms.corruptions import (
        GaussianBlur,
        GlassBlur,
        DefocusBlur,
    )

    show_images(
        [
            GaussianBlur,
            GlassBlur,
            DefocusBlur,
        ]
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_corruptions_002.png
   :alt: Original, Severity 1, Severity 2, Severity 3, Severity 4, Severity 5
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_corruptions_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-102

3. Other Corruptions
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 102-116

.. code-block:: Python

    from torch_uncertainty.transforms.corruptions import (
        JPEGCompression,
        Pixelate,
        Frost,
    )

    show_images(
        [
            JPEGCompression,
            Pixelate,
            Frost,
        ]
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_corruptions_003.png
   :alt: Original, Severity 1, Severity 2, Severity 3, Severity 4, Severity 5
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_corruptions_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://zenodo.org/records/10438904/files/frost.zip to data/frost.zip
      0%|          | 0/1780178 [00:00<?, ?it/s]      2%|▏         | 32768/1780178 [00:00<00:08, 200227.49it/s]      4%|▎         | 65536/1780178 [00:00<00:08, 201563.07it/s]      7%|▋         | 131072/1780178 [00:00<00:05, 295817.27it/s]     15%|█▍        | 262144/1780178 [00:00<00:02, 570856.62it/s]     29%|██▉       | 524288/1780178 [00:00<00:01, 982622.40it/s]     61%|██████    | 1081344/1780178 [00:00<00:00, 1865743.74it/s]    100%|██████████| 1780178/1780178 [00:00<00:00, 1825018.69it/s]
    Extracting data/frost.zip to data
    Downloaded frost.zip to data
    Files already downloaded and verified
    Files already downloaded and verified
    Files already downloaded and verified
    Files already downloaded and verified
    Files already downloaded and verified




.. GENERATED FROM PYTHON SOURCE LINES 117-121

Reference
---------

- **Benchmarking Neural Network Robustness to Common Corruptions and Perturbations**, Dan Hendrycks and Thomas Dietterich. `ICLR 2019 <https://arxiv.org/pdf/1903.12261>`_.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 28.170 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_corruptions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_corruptions.ipynb <tutorial_corruptions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_corruptions.py <tutorial_corruptions.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
