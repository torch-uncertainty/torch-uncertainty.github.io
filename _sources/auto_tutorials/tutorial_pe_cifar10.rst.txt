
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_pe_cifar10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorial_pe_cifar10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_pe_cifar10.py:


From a Vanilla Classifier to a Packed-Ensemble
==============================================

This tutorial is heavily inspired by PyTorch's `Training a Classifier <https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#test-the-network-on-the-test-data>`_
tutorial.

Let's dive step by step into the process to modify a vanilla classifier into a
packed-ensemble classifier.

Dataset
-------

In this tutorial we will use the CIFAR10 dataset available in the torchvision
package. The CIFAR10 dataset consists of 60000 32x32 colour images in 10
classes, with 6000 images per class. There are 50000 training images and 10000
test images.

Here is an example of what the data looks like:

.. figure:: /_static/img/cifar10.png
   :alt: cifar10

   cifar10

Training an image Packed-Ensemble classifier
--------------------------------------------

Here is the outline of the process:

1. Load and normalizing the CIFAR10 training and test datasets using
   ``torchvision``
2. Define a Packed-Ensemble from a vanilla classifier
3. Define a loss function
4. Train the Packed-Ensemble on the training data
5. Test the Packed-Ensemble on the test data and evaluate its performance
   w.r.t. uncertainty quantification and OOD detection

1. Load and normalize CIFAR10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: default

    import torch
    import torchvision
    import torchvision.transforms as transforms

    torch.set_num_threads(1)








.. GENERATED FROM PYTHON SOURCE LINES 51-53

The output of torchvision datasets are PILImage images of range [0, 1].
We transform them to Tensors of normalized range [-1, 1].

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. note::
    If running on Windows and you get a BrokenPipeError, try setting
    the num_worker of torch.utils.data.DataLoader() to 0.

.. GENERATED FROM PYTHON SOURCE LINES 58-95

.. code-block:: default


    transform = transforms.Compose(
        [
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
        ]
    )

    batch_size = 4

    trainset = torchvision.datasets.CIFAR10(
        root="./data", train=True, download=True, transform=transform
    )
    trainloader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True, num_workers=2
    )

    testset = torchvision.datasets.CIFAR10(
        root="./data", train=False, download=True, transform=transform
    )
    testloader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False, num_workers=2
    )

    classes = (
        "plane",
        "car",
        "bird",
        "cat",
        "deer",
        "dog",
        "frog",
        "horse",
        "ship",
        "truck",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz
      0%|          | 0/170498071 [00:00<?, ?it/s]      0%|          | 32768/170498071 [00:00<10:26, 271985.07it/s]      0%|          | 229376/170498071 [00:00<02:39, 1064419.96it/s]      1%|          | 917504/170498071 [00:00<00:53, 3169447.20it/s]      2%|▏         | 3637248/170498071 [00:00<00:15, 10755107.96it/s]      6%|▌         | 9568256/170498071 [00:00<00:06, 24446042.92it/s]      9%|▉         | 15794176/170498071 [00:00<00:04, 33406229.84it/s]     13%|█▎        | 21921792/170498071 [00:00<00:03, 41331797.50it/s]     15%|█▌        | 26181632/170498071 [00:00<00:03, 40607803.95it/s]     18%|█▊        | 31424512/170498071 [00:01<00:03, 43940022.93it/s]     21%|██▏       | 36503552/170498071 [00:01<00:02, 45912530.80it/s]     24%|██▍       | 41320448/170498071 [00:01<00:02, 46090646.72it/s]     28%|██▊       | 46956544/170498071 [00:01<00:02, 49067532.60it/s]     30%|███       | 51937280/170498071 [00:01<00:02, 47188327.13it/s]     33%|███▎      | 57114624/170498071 [00:01<00:02, 48426620.45it/s]     36%|███▋      | 62160896/170498071 [00:01<00:02, 48792319.76it/s]     39%|███▉      | 67076096/170498071 [00:01<00:02, 46979753.58it/s]     43%|████▎     | 72843264/170498071 [00:01<00:01, 49609658.43it/s]     46%|████▌     | 77856768/170498071 [00:01<00:01, 49464808.83it/s]     49%|████▊     | 82837504/170498071 [00:02<00:01, 47642583.96it/s]     52%|█████▏    | 88571904/170498071 [00:02<00:01, 49695092.26it/s]     55%|█████▍    | 93585408/170498071 [00:02<00:01, 49486145.50it/s]     58%|█████▊    | 98566144/170498071 [00:02<00:01, 48783175.20it/s]     61%|██████    | 104169472/170498071 [00:02<00:01, 50841051.37it/s]     64%|██████▍   | 109281280/170498071 [00:02<00:01, 48634204.14it/s]     67%|██████▋   | 114294784/170498071 [00:02<00:01, 48299426.08it/s]     70%|███████   | 119832576/170498071 [00:02<00:01, 50299968.58it/s]     73%|███████▎  | 124911616/170498071 [00:02<00:00, 48294171.59it/s]     76%|███████▋  | 130088960/170498071 [00:03<00:00, 49166305.51it/s]     79%|███████▉  | 135135232/170498071 [00:03<00:00, 49526225.40it/s]     82%|████████▏ | 140115968/170498071 [00:03<00:00, 47653453.76it/s]     86%|████████▌ | 145850368/170498071 [00:03<00:00, 50392125.83it/s]     89%|████████▊ | 150929408/170498071 [00:03<00:00, 49377449.55it/s]     91%|█████████▏| 155910144/170498071 [00:03<00:00, 47819482.88it/s]     95%|█████████▍| 161808384/170498071 [00:03<00:00, 50859528.56it/s]     98%|█████████▊| 166952960/170498071 [00:03<00:00, 49422828.60it/s]    100%|██████████| 170498071/170498071 [00:03<00:00, 44132832.65it/s]
    Extracting ./data/cifar-10-python.tar.gz to ./data
    Files already downloaded and verified




.. GENERATED FROM PYTHON SOURCE LINES 96-97

Let us show some of the training images, for fun.

.. GENERATED FROM PYTHON SOURCE LINES 97-122

.. code-block:: default


    import matplotlib.pyplot as plt

    import numpy as np

    # functions to show an image


    def imshow(img):
        img = img / 2 + 0.5  # unnormalize
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))
        plt.show()


    # get some random training images
    dataiter = iter(trainloader)
    images, labels = next(dataiter)

    # show images
    imshow(torchvision.utils.make_grid(images))
    # print labels
    print(" ".join(f"{classes[labels[j]]:5s}" for j in range(batch_size)))





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_pe_cifar10_001.png
   :alt: tutorial pe cifar10
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_pe_cifar10_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    frog  plane ship  ship 




.. GENERATED FROM PYTHON SOURCE LINES 123-127

2. Define a Packed-Ensemble from a vanilla classifier
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
First we define a vanilla classifier for CIFAR10 for reference. We will use a
convolutional neural network.

.. GENERATED FROM PYTHON SOURCE LINES 127-154

.. code-block:: default


    import torch.nn.functional as F
    from torch import nn


    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 5 * 5, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.flatten(1)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x


    net = Net()








.. GENERATED FROM PYTHON SOURCE LINES 155-157

Let's modify the vanilla classifier into a Packed-Ensemble classifier of
parameters :math:`M=4,\ \alpha=2\text{ and }\gamma=1`.

.. GENERATED FROM PYTHON SOURCE LINES 157-191

.. code-block:: default


    from einops import rearrange

    from torch_uncertainty.layers import PackedConv2d, PackedLinear


    class PackedNet(nn.Module):
        def __init__(self) -> None:
            super().__init__()
            M = 4
            alpha = 2
            gamma = 1
            self.conv1 = PackedConv2d(3, 6, 5, alpha=alpha, num_estimators=M, gamma=gamma, first=True)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = PackedConv2d(6, 16, 5, alpha=alpha, num_estimators=M, gamma=gamma)
            self.fc1 = PackedLinear(16 * 5 * 5, 120, alpha=alpha, num_estimators=M, gamma=gamma)
            self.fc2 = PackedLinear(120, 84, alpha=alpha, num_estimators=M, gamma=gamma)
            self.fc3 = PackedLinear(84, 10 * M, alpha=alpha, num_estimators=M, gamma=gamma, last=True)

            self.num_estimators = M

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = rearrange(x, "e (m c) h w -> (m e) c h w", m=self.num_estimators)
            x = x.flatten(1)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x


    packed_net = PackedNet()








.. GENERATED FROM PYTHON SOURCE LINES 192-195

3. Define a Loss function and optimizer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Let's use a Classification Cross-Entropy loss and SGD with momentum.

.. GENERATED FROM PYTHON SOURCE LINES 195-201

.. code-block:: default


    from torch import optim

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(packed_net.parameters(), lr=0.001, momentum=0.9)








.. GENERATED FROM PYTHON SOURCE LINES 202-205

4. Train the Packed-Ensemble on the training data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Let's train the Packed-Ensemble on the training data.

.. GENERATED FROM PYTHON SOURCE LINES 205-228

.. code-block:: default


    for epoch in range(2):  # loop over the dataset multiple times
        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs; data is a list of [inputs, labels]
            inputs, labels = data

            # zero the parameter gradients
            optimizer.zero_grad()
            # forward + backward + optimize
            outputs = packed_net(inputs)
            loss = criterion(outputs, labels.repeat(packed_net.num_estimators))
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 2000 == 1999:  # print every 2000 mini-batches
                print(f"[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}")
                running_loss = 0.0

    print("Finished Training")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1,  2000] loss: 3.113
    [1,  4000] loss: 2.265
    [1,  6000] loss: 2.108
    [1,  8000] loss: 1.982
    [1, 10000] loss: 1.903
    [1, 12000] loss: 1.836
    [2,  2000] loss: 1.787
    [2,  4000] loss: 1.745
    [2,  6000] loss: 1.706
    [2,  8000] loss: 1.671
    [2, 10000] loss: 1.638
    [2, 12000] loss: 1.619
    Finished Training




.. GENERATED FROM PYTHON SOURCE LINES 229-230

Save our trained model:

.. GENERATED FROM PYTHON SOURCE LINES 230-234

.. code-block:: default


    PATH = "./cifar_packed_net.pth"
    torch.save(packed_net.state_dict(), PATH)








.. GENERATED FROM PYTHON SOURCE LINES 235-238

5. Test the Packed-Ensemble on the test data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Let us display an image from the test set to get familiar.

.. GENERATED FROM PYTHON SOURCE LINES 238-249

.. code-block:: default


    dataiter = iter(testloader)
    images, labels = next(dataiter)

    # print images
    imshow(torchvision.utils.make_grid(images))
    print(
        "GroundTruth: ",
        " ".join(f"{classes[labels[j]]:5s}" for j in range(batch_size)),
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_pe_cifar10_002.png
   :alt: tutorial pe cifar10
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_pe_cifar10_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    GroundTruth:  cat   ship  ship  plane




.. GENERATED FROM PYTHON SOURCE LINES 250-252

Next, let us load back in our saved model (note: saving and re-loading the
model wasn't necessary here, we only did it to illustrate how to do so):

.. GENERATED FROM PYTHON SOURCE LINES 252-256

.. code-block:: default


    packed_net = PackedNet()
    packed_net.load_state_dict(torch.load(PATH))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <All keys matched successfully>



.. GENERATED FROM PYTHON SOURCE LINES 257-258

Let us see what the Packed-Ensemble thinks these examples above are:

.. GENERATED FROM PYTHON SOURCE LINES 258-271

.. code-block:: default


    logits = packed_net(images)
    logits = rearrange(logits, "(n b) c -> b n c", n=packed_net.num_estimators)
    probs_per_est = F.softmax(logits, dim=-1)
    outputs = probs_per_est.mean(dim=1)

    _, predicted = torch.max(outputs, 1)

    print(
        "Predicted: ",
        " ".join(f"{classes[predicted[j]]:5s}" for j in range(batch_size)),
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Predicted:  cat   ship  ship  ship 




.. GENERATED FROM PYTHON SOURCE LINES 272-273

The results seem pretty good.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 53.213 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_pe_cifar10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_pe_cifar10.py <tutorial_pe_cifar10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_pe_cifar10.ipynb <tutorial_pe_cifar10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
