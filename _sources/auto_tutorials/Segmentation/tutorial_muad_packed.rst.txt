
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/Segmentation/tutorial_muad_packed.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_Segmentation_tutorial_muad_packed.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_Segmentation_tutorial_muad_packed.py:


Packed ensembles Segmentation Tutorial using Muad Dataset
=========================================================

This tutorial demonstrates how to train a segmentation model on the MUAD dataset using TorchUncertainty.
MUAD is a synthetic dataset designed for evaluating autonomous driving under diverse uncertainties.
It includes **10,413 images** across training, validation, and test sets, featuring adverse weather,
lighting conditions, and out-of-distribution (OOD) objects. The dataset supports tasks like semantic segmentation,
depth estimation, and object detection.

For details and access, visit the `MUAD Website <https://muad-dataset.github.io/>`_.

1. Loading the utilities
~~~~~~~~~~~~~~~~~~~~~~~~

First, we load the following utilities from TorchUncertainty:

- the TUTrainer which mostly handles the link with the hardware (accelerators, precision, etc)
- the segmentation training & evaluation routine from torch_uncertainty.routines
- the datamodule handling dataloaders: MUADDataModule from torch_uncertainty.datamodules

.. GENERATED FROM PYTHON SOURCE LINES 25-40

.. code-block:: Python

    import matplotlib.pyplot as plt
    import torch
    import torchvision.transforms.v2.functional as F
    from torch import optim
    from torch.optim import lr_scheduler
    from torchvision import tv_tensors
    from torchvision.transforms import v2
    from torchvision.utils import draw_segmentation_masks

    from torch_uncertainty import TUTrainer
    from torch_uncertainty.datamodules.segmentation import MUADDataModule
    from torch_uncertainty.models.segmentation.unet import packed_small_unet
    from torch_uncertainty.routines import SegmentationRoutine
    from torch_uncertainty.transforms import RepeatTarget








.. GENERATED FROM PYTHON SOURCE LINES 41-43

2. Initializing the DataModule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 43-89

.. code-block:: Python

    muad_mean = MUADDataModule.mean
    muad_std = MUADDataModule.std

    train_transform = v2.Compose(
        [
            v2.Resize(size=(256, 512), antialias=True),
            v2.RandomHorizontalFlip(),
            v2.ToDtype(
                dtype={
                    tv_tensors.Image: torch.float32,
                    tv_tensors.Mask: torch.int64,
                    "others": None,
                },
                scale=True,
            ),
            v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )

    test_transform = v2.Compose(
        [
            v2.Resize(size=(256, 512), antialias=True),
            v2.ToDtype(
                dtype={
                    tv_tensors.Image: torch.float32,
                    tv_tensors.Mask: torch.int64,
                    "others": None,
                },
                scale=True,
            ),
            v2.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        ]
    )

    # datamodule providing the dataloaders to the trainer
    datamodule = MUADDataModule(
        root="./data",
        batch_size=10,
        version="small",
        train_transform=train_transform,
        test_transform=test_transform,
        num_workers=4,
    )
    datamodule.prepare_data()
    datamodule.setup("fit")








.. GENERATED FROM PYTHON SOURCE LINES 90-91

Visualize a validation input sample (and RGB image)

.. GENERATED FROM PYTHON SOURCE LINES 91-105

.. code-block:: Python


    # Undo normalization on the image and convert to uint8.
    img, tgt = datamodule.train[0]
    t_muad_mean = torch.tensor(muad_mean, device=img.device)
    t_muad_std = torch.tensor(muad_std, device=img.device)
    img = img * t_muad_std[:, None, None] + t_muad_mean[:, None, None]
    img = F.to_dtype(img, torch.uint8, scale=True)
    img_pil = F.to_pil_image(img)

    plt.figure(figsize=(6, 6))
    plt.imshow(img_pil)
    plt.axis("off")
    plt.show()




.. image-sg:: /auto_tutorials/Segmentation/images/sphx_glr_tutorial_muad_packed_001.png
   :alt: tutorial muad packed
   :srcset: /auto_tutorials/Segmentation/images/sphx_glr_tutorial_muad_packed_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-107

Visualize the same image above but segmented.

.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: Python


    tmp_tgt = tgt.masked_fill(tgt == 255, 21)
    tgt_masks = tmp_tgt == torch.arange(22, device=tgt.device)[:, None, None]
    img_segmented = draw_segmentation_masks(
        img, tgt_masks, alpha=1, colors=datamodule.train.color_palette
    )
    img_pil = F.to_pil_image(img_segmented)

    plt.figure(figsize=(6, 6))
    plt.imshow(img_pil)
    plt.axis("off")
    plt.show()




.. image-sg:: /auto_tutorials/Segmentation/images/sphx_glr_tutorial_muad_packed_002.png
   :alt: tutorial muad packed
   :srcset: /auto_tutorials/Segmentation/images/sphx_glr_tutorial_muad_packed_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-124

3. Instantiating the Model
~~~~~~~~~~~~~~~~~~~~~~~~~~
We create the model easily using the blueprint from torch_uncertainty.models.

.. GENERATED FROM PYTHON SOURCE LINES 124-135

.. code-block:: Python


    model = packed_small_unet(
        in_channels=datamodule.num_channels,
        num_classes=datamodule.num_classes,
        alpha=2,
        num_estimators=4,
        gamma=1,
        bilinear=True,
    )









.. GENERATED FROM PYTHON SOURCE LINES 136-138

4. Compute class weights to mitigate class inbalance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 138-184

.. code-block:: Python

    def enet_weighing(dataloader, num_classes, c=1.02):
        """Computes class weights as described in the ENet paper.

            w_class = 1 / (ln(c + p_class)),

        where c is usually 1.02 and p_class is the propensity score of that
        class:

            propensity_score = freq_class / total_pixels.

        References:
            https://arxiv.org/abs/1606.02147

        Args:
            dataloader (``data.Dataloader``): A data loader to iterate over the
                dataset.
            num_classes (``int``): The number of classes.
            c (``int``, optional): AN additional hyper-parameter which restricts
                the interval of values for the weights. Default: 1.02.
            ignore_indexes (``list``, optional): A list of indexes to ignore
                when computing the weights. Default to `None`.

        """
        class_count = 0
        total = 0
        for _, label in dataloader:
            label = label.cpu()
            # Flatten label
            flat_label = label.flatten()
            flat_label = flat_label[flat_label != 255]
            flat_label = flat_label[flat_label < num_classes]

            # Sum up the number of pixels of each class and the total pixel
            # counts for each label
            class_count += torch.bincount(flat_label, minlength=num_classes)
            total += flat_label.size(0)

        # Compute propensity score and then the weights for each class
        propensity_score = class_count / total

        return 1 / (torch.log(c + propensity_score))


    class_weights = enet_weighing(datamodule.val_dataloader(), datamodule.num_classes)
    print(class_weights)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([ 4.3817, 19.7927,  3.3011, 48.8031, 36.2141, 33.0049, 47.5130, 48.8560,
            12.4401, 48.0600, 14.4807, 30.8762,  4.7467, 19.3913, 50.4984])




.. GENERATED FROM PYTHON SOURCE LINES 185-186

Let's define the training parameters.

.. GENERATED FROM PYTHON SOURCE LINES 186-195

.. code-block:: Python

    BATCH_SIZE = 10
    LEARNING_RATE = 1e-3
    WEIGHT_DECAY = 2e-4
    LR_DECAY_EPOCHS = 20
    LR_DECAY = 0.1
    NB_EPOCHS = 1
    NUM_ESTIMATORS = 4









.. GENERATED FROM PYTHON SOURCE LINES 196-198

5. The Loss, the Routine, and the Trainer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 198-219

.. code-block:: Python


    # We build the optimizer
    optimizer = optim.Adam(
        model.parameters(), lr=LEARNING_RATE * NUM_ESTIMATORS, weight_decay=WEIGHT_DECAY
    )

    # Learning rate decay scheduler
    lr_updater = lr_scheduler.StepLR(optimizer, LR_DECAY_EPOCHS, LR_DECAY)

    packed_routine = SegmentationRoutine(
        model=model,
        num_classes=datamodule.num_classes,
        loss=torch.nn.CrossEntropyLoss(weight=class_weights),
        format_batch_fn=RepeatTarget(NUM_ESTIMATORS),  # Repeat the target 4 times for the ensemble
        optim_recipe={"optimizer": optimizer, "lr_scheduler": lr_updater},
    )

    trainer = TUTrainer(
        accelerator="gpu", devices=1, max_epochs=NB_EPOCHS, enable_progress_bar=True, precision=16
    )








.. GENERATED FROM PYTHON SOURCE LINES 220-222

6. Training the model
~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 222-223

.. code-block:: Python

    trainer.fit(model=packed_routine, datamodule=datamodule)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sanity Checking: |          | 0/? [00:00<?, ?it/s]    Sanity Checking:   0%|          | 0/2 [00:00<?, ?it/s]    Sanity Checking DataLoader 0:   0%|          | 0/2 [00:00<?, ?it/s]    Sanity Checking DataLoader 0:  50%|█████     | 1/2 [00:00<00:00,  6.91it/s]    Sanity Checking DataLoader 0: 100%|██████████| 2/2 [00:00<00:00,  6.98it/s]                                                                               Training: |          | 0/? [00:00<?, ?it/s]    Training:   0%|          | 0/40 [00:00<?, ?it/s]    Epoch 0:   0%|          | 0/40 [00:00<?, ?it/s]     Epoch 0:   2%|▎         | 1/40 [00:02<01:26,  0.45it/s]    Epoch 0:   2%|▎         | 1/40 [00:02<01:26,  0.45it/s, v_num=1, train_loss=2.820]    Epoch 0:   5%|▌         | 2/40 [00:02<00:52,  0.72it/s, v_num=1, train_loss=2.820]    Epoch 0:   5%|▌         | 2/40 [00:02<00:52,  0.72it/s, v_num=1, train_loss=2.680]    Epoch 0:   8%|▊         | 3/40 [00:03<00:41,  0.89it/s, v_num=1, train_loss=2.680]    Epoch 0:   8%|▊         | 3/40 [00:03<00:41,  0.89it/s, v_num=1, train_loss=2.630]    Epoch 0:  10%|█         | 4/40 [00:03<00:35,  1.02it/s, v_num=1, train_loss=2.630]    Epoch 0:  10%|█         | 4/40 [00:03<00:35,  1.02it/s, v_num=1, train_loss=2.580]    Epoch 0:  12%|█▎        | 5/40 [00:04<00:31,  1.11it/s, v_num=1, train_loss=2.580]    Epoch 0:  12%|█▎        | 5/40 [00:04<00:31,  1.11it/s, v_num=1, train_loss=2.470]    Epoch 0:  15%|█▌        | 6/40 [00:05<00:28,  1.18it/s, v_num=1, train_loss=2.470]    Epoch 0:  15%|█▌        | 6/40 [00:05<00:28,  1.18it/s, v_num=1, train_loss=2.440]    Epoch 0:  18%|█▊        | 7/40 [00:05<00:26,  1.24it/s, v_num=1, train_loss=2.440]    Epoch 0:  18%|█▊        | 7/40 [00:05<00:26,  1.24it/s, v_num=1, train_loss=2.460]    Epoch 0:  20%|██        | 8/40 [00:06<00:24,  1.29it/s, v_num=1, train_loss=2.460]    Epoch 0:  20%|██        | 8/40 [00:06<00:24,  1.29it/s, v_num=1, train_loss=2.390]    Epoch 0:  22%|██▎       | 9/40 [00:06<00:23,  1.33it/s, v_num=1, train_loss=2.390]    Epoch 0:  22%|██▎       | 9/40 [00:06<00:23,  1.33it/s, v_num=1, train_loss=2.360]    Epoch 0:  25%|██▌       | 10/40 [00:07<00:22,  1.36it/s, v_num=1, train_loss=2.360]    Epoch 0:  25%|██▌       | 10/40 [00:07<00:22,  1.36it/s, v_num=1, train_loss=2.500]    Epoch 0:  28%|██▊       | 11/40 [00:07<00:20,  1.39it/s, v_num=1, train_loss=2.500]    Epoch 0:  28%|██▊       | 11/40 [00:07<00:20,  1.39it/s, v_num=1, train_loss=2.360]    Epoch 0:  30%|███       | 12/40 [00:08<00:19,  1.41it/s, v_num=1, train_loss=2.360]    Epoch 0:  30%|███       | 12/40 [00:08<00:19,  1.41it/s, v_num=1, train_loss=2.280]    Epoch 0:  32%|███▎      | 13/40 [00:09<00:18,  1.43it/s, v_num=1, train_loss=2.280]    Epoch 0:  32%|███▎      | 13/40 [00:09<00:18,  1.43it/s, v_num=1, train_loss=2.240]    Epoch 0:  35%|███▌      | 14/40 [00:09<00:17,  1.45it/s, v_num=1, train_loss=2.240]    Epoch 0:  35%|███▌      | 14/40 [00:09<00:17,  1.45it/s, v_num=1, train_loss=2.220]    Epoch 0:  38%|███▊      | 15/40 [00:10<00:17,  1.47it/s, v_num=1, train_loss=2.220]    Epoch 0:  38%|███▊      | 15/40 [00:10<00:17,  1.47it/s, v_num=1, train_loss=2.240]    Epoch 0:  40%|████      | 16/40 [00:10<00:16,  1.48it/s, v_num=1, train_loss=2.240]    Epoch 0:  40%|████      | 16/40 [00:10<00:16,  1.48it/s, v_num=1, train_loss=2.270]    Epoch 0:  42%|████▎     | 17/40 [00:11<00:15,  1.50it/s, v_num=1, train_loss=2.270]    Epoch 0:  42%|████▎     | 17/40 [00:11<00:15,  1.50it/s, v_num=1, train_loss=2.210]    Epoch 0:  45%|████▌     | 18/40 [00:11<00:14,  1.51it/s, v_num=1, train_loss=2.210]    Epoch 0:  45%|████▌     | 18/40 [00:11<00:14,  1.51it/s, v_num=1, train_loss=2.180]    Epoch 0:  48%|████▊     | 19/40 [00:12<00:13,  1.52it/s, v_num=1, train_loss=2.180]    Epoch 0:  48%|████▊     | 19/40 [00:12<00:13,  1.52it/s, v_num=1, train_loss=2.250]    Epoch 0:  50%|█████     | 20/40 [00:13<00:13,  1.53it/s, v_num=1, train_loss=2.250]    Epoch 0:  50%|█████     | 20/40 [00:13<00:13,  1.53it/s, v_num=1, train_loss=2.220]    Epoch 0:  52%|█████▎    | 21/40 [00:13<00:12,  1.54it/s, v_num=1, train_loss=2.220]    Epoch 0:  52%|█████▎    | 21/40 [00:13<00:12,  1.54it/s, v_num=1, train_loss=2.190]    Epoch 0:  55%|█████▌    | 22/40 [00:14<00:11,  1.55it/s, v_num=1, train_loss=2.190]    Epoch 0:  55%|█████▌    | 22/40 [00:14<00:11,  1.55it/s, v_num=1, train_loss=2.120]    Epoch 0:  57%|█████▊    | 23/40 [00:14<00:10,  1.56it/s, v_num=1, train_loss=2.120]    Epoch 0:  57%|█████▊    | 23/40 [00:14<00:10,  1.56it/s, v_num=1, train_loss=2.200]    Epoch 0:  60%|██████    | 24/40 [00:15<00:10,  1.56it/s, v_num=1, train_loss=2.200]    Epoch 0:  60%|██████    | 24/40 [00:15<00:10,  1.56it/s, v_num=1, train_loss=2.080]    Epoch 0:  62%|██████▎   | 25/40 [00:15<00:09,  1.57it/s, v_num=1, train_loss=2.080]    Epoch 0:  62%|██████▎   | 25/40 [00:15<00:09,  1.57it/s, v_num=1, train_loss=2.040]    Epoch 0:  65%|██████▌   | 26/40 [00:16<00:08,  1.58it/s, v_num=1, train_loss=2.040]    Epoch 0:  65%|██████▌   | 26/40 [00:16<00:08,  1.58it/s, v_num=1, train_loss=2.190]    Epoch 0:  68%|██████▊   | 27/40 [00:17<00:08,  1.58it/s, v_num=1, train_loss=2.190]    Epoch 0:  68%|██████▊   | 27/40 [00:17<00:08,  1.58it/s, v_num=1, train_loss=2.140]    Epoch 0:  70%|███████   | 28/40 [00:17<00:07,  1.59it/s, v_num=1, train_loss=2.140]    Epoch 0:  70%|███████   | 28/40 [00:17<00:07,  1.59it/s, v_num=1, train_loss=2.120]    Epoch 0:  72%|███████▎  | 29/40 [00:18<00:06,  1.59it/s, v_num=1, train_loss=2.120]    Epoch 0:  72%|███████▎  | 29/40 [00:18<00:06,  1.59it/s, v_num=1, train_loss=1.980]    Epoch 0:  75%|███████▌  | 30/40 [00:18<00:06,  1.60it/s, v_num=1, train_loss=1.980]    Epoch 0:  75%|███████▌  | 30/40 [00:18<00:06,  1.60it/s, v_num=1, train_loss=1.980]    Epoch 0:  78%|███████▊  | 31/40 [00:19<00:05,  1.60it/s, v_num=1, train_loss=1.980]    Epoch 0:  78%|███████▊  | 31/40 [00:19<00:05,  1.60it/s, v_num=1, train_loss=2.240]    Epoch 0:  80%|████████  | 32/40 [00:19<00:04,  1.61it/s, v_num=1, train_loss=2.240]    Epoch 0:  80%|████████  | 32/40 [00:19<00:04,  1.61it/s, v_num=1, train_loss=1.920]    Epoch 0:  82%|████████▎ | 33/40 [00:20<00:04,  1.61it/s, v_num=1, train_loss=1.920]    Epoch 0:  82%|████████▎ | 33/40 [00:20<00:04,  1.61it/s, v_num=1, train_loss=2.100]    Epoch 0:  85%|████████▌ | 34/40 [00:21<00:03,  1.61it/s, v_num=1, train_loss=2.100]    Epoch 0:  85%|████████▌ | 34/40 [00:21<00:03,  1.61it/s, v_num=1, train_loss=1.970]    Epoch 0:  88%|████████▊ | 35/40 [00:21<00:03,  1.62it/s, v_num=1, train_loss=1.970]    Epoch 0:  88%|████████▊ | 35/40 [00:21<00:03,  1.62it/s, v_num=1, train_loss=1.970]    Epoch 0:  90%|█████████ | 36/40 [00:22<00:02,  1.62it/s, v_num=1, train_loss=1.970]    Epoch 0:  90%|█████████ | 36/40 [00:22<00:02,  1.62it/s, v_num=1, train_loss=2.010]    Epoch 0:  92%|█████████▎| 37/40 [00:22<00:01,  1.62it/s, v_num=1, train_loss=2.010]    Epoch 0:  92%|█████████▎| 37/40 [00:22<00:01,  1.62it/s, v_num=1, train_loss=2.000]    Epoch 0:  95%|█████████▌| 38/40 [00:23<00:01,  1.63it/s, v_num=1, train_loss=2.000]    Epoch 0:  95%|█████████▌| 38/40 [00:23<00:01,  1.63it/s, v_num=1, train_loss=2.110]    Epoch 0:  98%|█████████▊| 39/40 [00:23<00:00,  1.63it/s, v_num=1, train_loss=2.110]    Epoch 0:  98%|█████████▊| 39/40 [00:23<00:00,  1.63it/s, v_num=1, train_loss=2.080]    Epoch 0: 100%|██████████| 40/40 [00:24<00:00,  1.63it/s, v_num=1, train_loss=2.080]    Epoch 0: 100%|██████████| 40/40 [00:24<00:00,  1.63it/s, v_num=1, train_loss=2.040]
    Validation: |          | 0/? [00:00<?, ?it/s]
    Validation:   0%|          | 0/6 [00:00<?, ?it/s]
    Validation DataLoader 0:   0%|          | 0/6 [00:00<?, ?it/s]
    Validation DataLoader 0:  17%|█▋        | 1/6 [00:00<00:00,  7.12it/s]
    Validation DataLoader 0:  33%|███▎      | 2/6 [00:00<00:00,  7.08it/s]
    Validation DataLoader 0:  50%|█████     | 3/6 [00:00<00:00,  7.06it/s]
    Validation DataLoader 0:  67%|██████▋   | 4/6 [00:00<00:00,  7.05it/s]
    Validation DataLoader 0:  83%|████████▎ | 5/6 [00:01<00:00,  3.23it/s]
    Validation DataLoader 0: 100%|██████████| 6/6 [00:01<00:00,  3.74it/s]
                                                                              Epoch 0: 100%|██████████| 40/40 [00:27<00:00,  1.45it/s, v_num=1, train_loss=2.040, mIoU%=9.770]    Epoch 0: 100%|██████████| 40/40 [00:27<00:00,  1.45it/s, v_num=1, train_loss=2.040, mIoU%=9.770]    Epoch 0: 100%|██████████| 40/40 [00:27<00:00,  1.44it/s, v_num=1, train_loss=2.040, mIoU%=9.770]




.. GENERATED FROM PYTHON SOURCE LINES 224-226

7. Testing the model
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 226-228

.. code-block:: Python

    results = trainer.test(datamodule=datamodule, ckpt_path="best")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Testing: |          | 0/? [00:00<?, ?it/s]    Testing:   0%|          | 0/12 [00:00<?, ?it/s]    Testing DataLoader 0:   0%|          | 0/12 [00:00<?, ?it/s]    Testing DataLoader 0:   8%|▊         | 1/12 [00:00<00:01,  6.61it/s]    Testing DataLoader 0:  17%|█▋        | 2/12 [00:00<00:01,  6.56it/s]    Testing DataLoader 0:  25%|██▌       | 3/12 [00:00<00:01,  6.54it/s]    Testing DataLoader 0:  33%|███▎      | 4/12 [00:00<00:01,  6.52it/s]    Testing DataLoader 0:  42%|████▏     | 5/12 [00:01<00:02,  2.99it/s]    Testing DataLoader 0:  50%|█████     | 6/12 [00:01<00:01,  3.28it/s]    Testing DataLoader 0:  58%|█████▊    | 7/12 [00:01<00:01,  3.53it/s]    Testing DataLoader 0:  67%|██████▋   | 8/12 [00:02<00:01,  3.74it/s]    Testing DataLoader 0:  75%|███████▌  | 9/12 [00:03<00:01,  2.84it/s]    Testing DataLoader 0:  83%|████████▎ | 10/12 [00:03<00:00,  3.01it/s]    Testing DataLoader 0:  92%|█████████▏| 11/12 [00:03<00:00,  3.17it/s]    Testing DataLoader 0: 100%|██████████| 12/12 [00:03<00:00,  3.43it/s]    Testing DataLoader 0: 100%|██████████| 12/12 [00:03<00:00,  3.42it/s]
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃       Segmentation        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    Brier     │          0.74395          │
    │     NLL      │          1.82258          │
    │     mAcc     │          18.800%          │
    │     mIoU     │          9.615%           │
    │    pixAcc    │          44.427%          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Calibration        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     ECE      │          18.053%          │
    │     aECE     │          17.617%          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃ Selective Classification  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          23.640%          │
    │     AURC     │          40.663%          │
    │  Cov@5Risk   │           nan%            │
    │  Risk@80Cov  │          51.920%          │
    └──────────────┴───────────────────────────┘




.. GENERATED FROM PYTHON SOURCE LINES 229-232

8. Uncertainty evaluations with MCP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we will just use as confidence score the Maximum class probability (MCP)

.. GENERATED FROM PYTHON SOURCE LINES 232-284

.. code-block:: Python

    img, target = datamodule.test[0]

    batch_img = img.unsqueeze(0)
    batch_target = target.unsqueeze(0)
    model.eval()
    with torch.no_grad():
        # Forward propagation
        outputs = model(batch_img)
        outputs_proba = outputs.softmax(dim=1)
        # average the outputs over the estimators
        outputs_proba = outputs_proba.mean(dim=0)
        # remove the batch dimension
        outputs_proba = outputs_proba.squeeze(0)
        confidence, pred = outputs_proba.max(0)

    # Undo normalization on the image and convert to uint8.
    mean = torch.tensor([0.485, 0.456, 0.406], device=img.device)
    std = torch.tensor([0.229, 0.224, 0.225], device=img.device)
    img = img * std[:, None, None] + mean[:, None, None]
    img = F.to_dtype(img, torch.uint8, scale=True)

    tmp_target = target.masked_fill(target == 255, 21)
    target_masks = tmp_target == torch.arange(22, device=target.device)[:, None, None]
    img_segmented = draw_segmentation_masks(
        img, target_masks, alpha=1, colors=datamodule.test.color_palette
    )

    pred_masks = pred == torch.arange(22, device=pred.device)[:, None, None]

    pred_img = draw_segmentation_masks(img, pred_masks, alpha=1, colors=datamodule.test.color_palette)


    if confidence.ndim == 2:
        confidence = confidence.unsqueeze(0)

    img = F.to_pil_image(F.resize(img, 1024))
    img_segmented = F.to_pil_image(F.resize(img_segmented, 1024))
    pred_img = F.to_pil_image(F.resize(pred_img, 1024))
    confidence_img = F.to_pil_image(F.resize(confidence, 1024))


    fig, axs = plt.subplots(1, 4, figsize=(25, 7))
    images = [img, img_segmented, pred_img, confidence_img]

    for ax, im in zip(axs, images, strict=False):
        ax.imshow(im)
        ax.axis("off")

    plt.subplots_adjust(left=0.01, right=0.99, top=0.99, bottom=0.01, wspace=0.05)

    plt.show()




.. image-sg:: /auto_tutorials/Segmentation/images/sphx_glr_tutorial_muad_packed_003.png
   :alt: tutorial muad packed
   :srcset: /auto_tutorials/Segmentation/images/sphx_glr_tutorial_muad_packed_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 39.252 seconds)


.. _sphx_glr_download_auto_tutorials_Segmentation_tutorial_muad_packed.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_muad_packed.ipynb <tutorial_muad_packed.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_muad_packed.py <tutorial_muad_packed.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: tutorial_muad_packed.zip <tutorial_muad_packed.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
