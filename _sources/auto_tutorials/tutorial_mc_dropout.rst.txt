
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_mc_dropout.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorial_mc_dropout.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_mc_dropout.py:


Training a LeNet with Monte-Carlo Dropout
=========================================

In this tutorial, we will train a LeNet classifier on the MNIST dataset using Monte-Carlo Dropout (MC Dropout), a computationally efficient Bayesian approximation method. To estimate the predictive mean and uncertainty (variance), we perform multiple forward passes through the network with dropout layers enabled in ``train`` mode.

For more information on Monte-Carlo Dropout, we refer the reader to the following resources:

- Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning `ICML 2016 <https://browse.arxiv.org/pdf/1506.02142.pdf>`_
- What Uncertainties Do We Need in Bayesian Deep Learning for Computer Vision? `NeurIPS 2017 <https://browse.arxiv.org/pdf/1703.04977.pdf>`_

Training a LeNet with MC Dropout using TorchUncertainty models and PyTorch Lightning
-------------------------------------------------------------------------------------

In this part, we train a LeNet with dropout layers, based on the model and routines already implemented in TU.

1. Loading the utilities
~~~~~~~~~~~~~~~~~~~~~~~~

First, we have to load the following utilities from TorchUncertainty:

- the TUTrainer from TorchUncertainty utils
- the datamodule handling dataloaders: MNISTDataModule from torch_uncertainty.datamodules
- the model: lenet from torch_uncertainty.models
- the MC Dropout wrapper: mc_dropout, from torch_uncertainty.models.wrappers
- the classification training & evaluation routine in the torch_uncertainty.routines
- an optimization recipe in the torch_uncertainty.optim_recipes module.

We also need import the neural network utils within `torch.nn`.

.. GENERATED FROM PYTHON SOURCE LINES 32-43

.. code-block:: Python

    from pathlib import Path

    from torch_uncertainty.utils import TUTrainer
    from torch import nn

    from torch_uncertainty.datamodules import MNISTDataModule
    from torch_uncertainty.models.lenet import lenet
    from torch_uncertainty.models import mc_dropout
    from torch_uncertainty.optim_recipes import optim_cifar10_resnet18
    from torch_uncertainty.routines import ClassificationRoutine








.. GENERATED FROM PYTHON SOURCE LINES 44-53

2. Defining the Model and the Trainer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following, we first create the trainer and instantiate 
the datamodule that handles the MNIST dataset,
dataloaders and transforms. We create the model using the
blueprint from torch_uncertainty.models and we wrap it into an mc_dropout.
To use the mc_dropout wrapper, **make sure that you use dropout modules** and
not functionals. Moreover, **they have to be** instantiated in the __init__ method.

.. GENERATED FROM PYTHON SOURCE LINES 53-69

.. code-block:: Python


    trainer = TUTrainer(accelerator="cpu", max_epochs=2, enable_progress_bar=False)

    # datamodule
    root = Path("data")
    datamodule = MNISTDataModule(root=root, batch_size=128)


    model = lenet(
        in_channels=datamodule.num_channels,
        num_classes=datamodule.num_classes,
        dropout_rate=0.4,
    )

    mc_model = mc_dropout(model, num_estimators=16, last_layer=False)








.. GENERATED FROM PYTHON SOURCE LINES 70-76

3. The Loss and the Training Routine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a classification problem, and we use CrossEntropyLoss as the (negative-log-)likelihood.
We define the training routine using the classification training routine from
torch_uncertainty.routines. We provide the number of classes
the optimization recipe and tell the routine that our model is an ensemble at evaluation time.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: Python


    routine = ClassificationRoutine(
        num_classes=datamodule.num_classes,
        model=mc_model,
        loss=nn.CrossEntropyLoss(),
        optim_recipe=optim_cifar10_resnet18(mc_model),
        is_ensemble=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 86-92

4. Gathering Everything and Training the Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can now train the model using the trainer. We pass the routine and the datamodule
to the fit and test methods of the trainer. It will automatically evaluate some uncertainty
metrics that you will find in the table below.

.. GENERATED FROM PYTHON SOURCE LINES 92-96

.. code-block:: Python


    trainer.fit(model=routine, datamodule=datamodule)
    results = trainer.test(model=routine, datamodule=datamodule)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to data/MNIST/raw/train-images-idx3-ubyte.gz
      0%|          | 0/9912422 [00:00<?, ?it/s]    100%|██████████| 9912422/9912422 [00:00<00:00, 123155181.00it/s]
    Extracting data/MNIST/raw/train-images-idx3-ubyte.gz to data/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to data/MNIST/raw/train-labels-idx1-ubyte.gz
      0%|          | 0/28881 [00:00<?, ?it/s]    100%|██████████| 28881/28881 [00:00<00:00, 5604501.43it/s]
    Extracting data/MNIST/raw/train-labels-idx1-ubyte.gz to data/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to data/MNIST/raw/t10k-images-idx3-ubyte.gz
      0%|          | 0/1648877 [00:00<?, ?it/s]    100%|██████████| 1648877/1648877 [00:00<00:00, 30746860.79it/s]
    Extracting data/MNIST/raw/t10k-images-idx3-ubyte.gz to data/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to data/MNIST/raw/t10k-labels-idx1-ubyte.gz
      0%|          | 0/4542 [00:00<?, ?it/s]    100%|██████████| 4542/4542 [00:00<00:00, 30238934.55it/s]
    Extracting data/MNIST/raw/t10k-labels-idx1-ubyte.gz to data/MNIST/raw

    /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/lightning/pytorch/trainer/connectors/data_connector.py:424: The 'val_dataloader' does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` to `num_workers=3` in the `DataLoader` to improve performance.
    /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/lightning/pytorch/trainer/connectors/data_connector.py:424: The 'train_dataloader' does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` to `num_workers=3` in the `DataLoader` to improve performance.
    /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/lightning/pytorch/trainer/connectors/data_connector.py:424: The 'test_dataloader' does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` to `num_workers=3` in the `DataLoader` to improve performance.
    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃        Test metric        ┃       DataLoader 0        ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │       test/cal/ECE        │          0.37105          │
    │       test/cal/aECE       │          0.37105          │
    │       test/cls/Acc        │          0.88700          │
    │      test/cls/Brier       │          0.34626          │
    │       test/cls/NLL        │          0.80050          │
    │     test/cls/entropy      │          1.54822          │
    │   test/ens_Disagreement   │          0.46892          │
    │     test/ens_Entropy      │          1.16642          │
    │        test/ens_MI        │          0.38180          │
    │       test/sc/AUGRC       │          0.01958          │
    │       test/sc/AURC        │          0.02408          │
    │    test/sc/CovAt5Risk     │          0.80750          │
    │    test/sc/RiskAt80Cov    │          0.04775          │
    └───────────────────────────┴───────────────────────────┘




.. GENERATED FROM PYTHON SOURCE LINES 97-101

5. Testing the Model
~~~~~~~~~~~~~~~~~~~~
Now that the model is trained, let's test it on MNIST. Don't forget to call
.eval() to enable dropout at evaluation and get multiple (here 16) predictions.

.. GENERATED FROM PYTHON SOURCE LINES 101-136

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    import torchvision


    def imshow(img):
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))
        plt.axis("off")
        plt.tight_layout()
        plt.show()


    dataiter = iter(datamodule.val_dataloader())
    images, labels = next(dataiter)

    # print images
    imshow(torchvision.utils.make_grid(images[:6, ...], padding=0))
    print("Ground truth labels: ", " ".join(f"{labels[j]}" for j in range(6)))

    routine.eval()
    logits = routine(images).reshape(16, 128, 10)

    probs = torch.nn.functional.softmax(logits, dim=-1)


    for j in range(6):
        values, predicted = torch.max(probs[:, j], 1)
        print(
            f"MC-Dropout predictions for the image {j+1}: ",
            " ".join([str(image_id.item()) for image_id in predicted]),
        )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_mc_dropout_001.png
   :alt: tutorial mc dropout
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_mc_dropout_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
    Ground truth labels:  7 2 1 0 4 1
    MC-Dropout predictions for the image 1:  7 7 7 7 9 7 7 7 7 7 7 7 7 7 7 7
    MC-Dropout predictions for the image 2:  3 0 3 1 0 2 7 2 0 0 6 6 2 0 1 0
    MC-Dropout predictions for the image 3:  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    MC-Dropout predictions for the image 4:  1 0 0 0 8 0 4 0 0 1 8 9 0 9 0 0
    MC-Dropout predictions for the image 5:  9 9 4 6 4 4 4 4 4 4 4 9 4 9 4 4
    MC-Dropout predictions for the image 6:  1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1




.. GENERATED FROM PYTHON SOURCE LINES 137-139

Most of the time, we see that there is some disagreement between the samples of the dropout
approximation of the posterior distribution.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 44.514 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_mc_dropout.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_mc_dropout.ipynb <tutorial_mc_dropout.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_mc_dropout.py <tutorial_mc_dropout.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: tutorial_mc_dropout.zip <tutorial_mc_dropout.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
