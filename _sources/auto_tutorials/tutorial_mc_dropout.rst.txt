
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_mc_dropout.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorial_mc_dropout.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_mc_dropout.py:


Training a LeNet with Monte-Carlo Dropout
=========================================

In this tutorial, we will train a LeNet classifier on the MNIST dataset using Monte-Carlo Dropout (MC Dropout), a computationally efficient Bayesian approximation method. To estimate the predictive mean and uncertainty (variance), we perform multiple forward passes through the network with dropout layers enabled in ``train`` mode.

For more information on Monte-Carlo Dropout, we refer the reader to the following resources:

- What Uncertainties Do We Need in Bayesian Deep Learning for Computer Vision? `NeurIPS 2017 <https://browse.arxiv.org/pdf/1703.04977.pdf>`_
- Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning `PMLR 2016 <https://browse.arxiv.org/pdf/1506.02142.pdf>`_

Training a LeNet with MC Dropout using TorchUncertainty models and PyTorch Lightning
-------------------------------------------------------------------------------------

In this part, we train a LeNet with dropout layers, based on the model and routines already implemented in TU.

1. Loading the utilities
~~~~~~~~~~~~~~~~~~~~~~~~

First, we have to load the following utilities from TorchUncertainty:

- the Trainer from Lightning
- the datamodule that handles dataloaders: MNISTDataModule, which lies in the torch_uncertainty.datamodule
- the model: LeNet, which lies in torch_uncertainty.models
- the mc-dropout wrapper: mc_dropout, which lies in torch_uncertainty.models
- the classification training routine in the torch_uncertainty.training.classification module
- an optimization recipe in the torch_uncertainty.optim_recipes module.

We also need import the neural network utils within `torch.nn`.

.. GENERATED FROM PYTHON SOURCE LINES 32-43

.. code-block:: Python

    from pathlib import Path

    from lightning.pytorch import Trainer
    from torch import nn

    from torch_uncertainty.datamodules import MNISTDataModule
    from torch_uncertainty.models.lenet import lenet
    from torch_uncertainty.models import mc_dropout
    from torch_uncertainty.optim_recipes import optim_cifar10_resnet18
    from torch_uncertainty.routines import ClassificationRoutine








.. GENERATED FROM PYTHON SOURCE LINES 44-55

2. Creating the necessary variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following, we will need to define the root of the datasets and the
logs, and to fake-parse the arguments needed for using the PyTorch Lightning
Trainer. We also create the datamodule that handles the MNIST dataset,
dataloaders and transforms. We create the model using the
blueprint from torch_uncertainty.models and we wrap it into mc-dropout.

It is important to specify the arguments ``version`` as ``mc-dropout``,
``num_estimators`` and the ``dropout_rate`` to use Monte Carlo dropout.

.. GENERATED FROM PYTHON SOURCE LINES 55-71

.. code-block:: Python


    trainer = Trainer(accelerator="cpu", max_epochs=2, enable_progress_bar=False)

    # datamodule
    root = Path("")  / "data"
    datamodule = MNISTDataModule(root=root, batch_size=128)


    model = lenet(
        in_channels=datamodule.num_channels,
        num_classes=datamodule.num_classes,
        dropout_rate=0.6,
    )

    mc_model = mc_dropout(model, num_estimators=16, last_layer=False)








.. GENERATED FROM PYTHON SOURCE LINES 72-80

3. The Loss and the Training Routine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a classification problem, and we use CrossEntropyLoss as the likelihood.
We define the training routine using the classification training routine from
torch_uncertainty.routines.classification. We provide the number of classes
and channels, the optimizer wrapper, the dropout rate, and the number of
forward passes to perform through the network, as well as all the default
arguments.

.. GENERATED FROM PYTHON SOURCE LINES 80-90

.. code-block:: Python


    routine = ClassificationRoutine(
        num_classes=datamodule.num_classes,
        model=mc_model,
        loss=nn.CrossEntropyLoss(),
        optim_recipe=optim_cifar10_resnet18(mc_model),
        num_estimators=16,

    )








.. GENERATED FROM PYTHON SOURCE LINES 91-93

4. Gathering Everything and Training the Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: Python


    trainer.fit(model=routine, datamodule=datamodule)
    trainer.test(model=routine, datamodule=datamodule)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/lightning/pytorch/trainer/connectors/data_connector.py:441: The 'val_dataloader' does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` to `num_workers=3` in the `DataLoader` to improve performance.
    /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/lightning/pytorch/trainer/connectors/data_connector.py:441: The 'train_dataloader' does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` to `num_workers=3` in the `DataLoader` to improve performance.
    /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/lightning/pytorch/trainer/connectors/data_connector.py:441: The 'test_dataloader' does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` to `num_workers=3` in the `DataLoader` to improve performance.
    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃        Test metric        ┃       DataLoader 0        ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │       cls_test/Acc        │    0.7250999808311462     │
    │      cls_test/Brier       │    0.5080809593200684     │
    │       cls_test/ECE        │    0.3189796209335327     │
    │       cls_test/NLL        │    1.1486555337905884     │
    │ cls_test/ens_Disagreement │     0.589411735534668     │
    │   cls_test/ens_Entropy    │    1.4178621768951416     │
    │      cls_test/ens_MI      │    0.3550560772418976     │
    │     cls_test/entropy      │    1.7729179859161377     │
    └───────────────────────────┴───────────────────────────┘

    [{'cls_test/Acc': 0.7250999808311462, 'cls_test/Brier': 0.5080809593200684, 'cls_test/ECE': 0.3189796209335327, 'cls_test/NLL': 1.1486555337905884, 'cls_test/entropy': 1.7729179859161377, 'cls_test/ens_Disagreement': 0.589411735534668, 'cls_test/ens_Entropy': 1.4178621768951416, 'cls_test/ens_MI': 0.3550560772418976}]



.. GENERATED FROM PYTHON SOURCE LINES 98-102

5. Testing the Model
~~~~~~~~~~~~~~~~~~~~
Now that the model is trained, let's test it on MNIST. Don't forget to call
.eval() to enable dropout at inference.

.. GENERATED FROM PYTHON SOURCE LINES 102-137

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    import torchvision


    def imshow(img):
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))
        plt.axis("off")
        plt.tight_layout()
        plt.show()


    dataiter = iter(datamodule.val_dataloader())
    images, labels = next(dataiter)

    # print images
    imshow(torchvision.utils.make_grid(images[:4, ...]))
    print("Ground truth: ", " ".join(f"{labels[j]}" for j in range(4)))

    routine.eval()
    logits = routine(images).reshape(16, 128, 10)

    probs = torch.nn.functional.softmax(logits, dim=-1)


    for j in range(4):
        values, predicted = torch.max(probs[:, j], 1)
        print(
            f"Predicted digits for the image {j+1}: ",
            " ".join([str(image_id.item()) for image_id in predicted]),
        )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_mc_dropout_001.png
   :alt: tutorial mc dropout
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_mc_dropout_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
    Ground truth:  7 2 1 0
    Predicted digits for the image 1:  7 9 7 7 7 5 9 9 9 7 7 3 7 9 7 7
    Predicted digits for the image 2:  2 2 2 2 2 2 8 2 6 8 2 2 6 2 2 2
    Predicted digits for the image 3:  1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1
    Predicted digits for the image 4:  8 0 6 6 0 0 0 6 6 8 0 8 8 8 8 0




.. GENERATED FROM PYTHON SOURCE LINES 138-139

approximation of the posterior distribution.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 46.033 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_mc_dropout.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_mc_dropout.ipynb <tutorial_mc_dropout.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_mc_dropout.py <tutorial_mc_dropout.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
