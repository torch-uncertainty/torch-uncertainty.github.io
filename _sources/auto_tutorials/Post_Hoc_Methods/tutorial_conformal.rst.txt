
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/Post_Hoc_Methods/tutorial_conformal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_Post_Hoc_Methods_tutorial_conformal.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_Post_Hoc_Methods_tutorial_conformal.py:


Conformal Prediction on CIFAR-10 with TorchUncertainty
======================================================

We evaluate the model's performance both before and after applying different conformal predictors (THR, APS, RAPS), and visualize how conformal prediction estimates the prediction sets.

We use the pretrained ResNet models we provide on Hugging Face.

.. GENERATED FROM PYTHON SOURCE LINES 12-23

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    from huggingface_hub import hf_hub_download

    from torch_uncertainty import TUTrainer
    from torch_uncertainty.datamodules import CIFAR10DataModule
    from torch_uncertainty.models.classification.resnet import resnet
    from torch_uncertainty.post_processing import ConformalClsAPS, ConformalClsRAPS, ConformalClsTHR
    from torch_uncertainty.routines import ClassificationRoutine








.. GENERATED FROM PYTHON SOURCE LINES 24-28

1. Load pretrained model from Hugging Face repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We use a ResNet18 model trained on CIFAR-10, provided by the TorchUncertainty team

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: Python


    ckpt_path = hf_hub_download(repo_id="torch-uncertainty/resnet18_c10", filename="resnet18_c10.ckpt")
    model = resnet(in_channels=3, num_classes=10, arch=18, conv_bias=False, style="cifar")
    ckpt = torch.load(ckpt_path, weights_only=True)
    model.load_state_dict(ckpt)
    model = model.cuda().eval()








.. GENERATED FROM PYTHON SOURCE LINES 36-42

2. Load CIFAR-10 Dataset & Define Dataloaders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We set eval_ood to True to evaluate the performance of Conformal scores for detecting out-of-distribution
samples. In this case, since we use a model trained on the full training set, we use the test set to as calibration
set for the Conformal methods and for its evaluation. This is not a proper way to evaluate the coverage.

.. GENERATED FROM PYTHON SOURCE LINES 42-56

.. code-block:: Python


    BATCH_SIZE = 128

    datamodule = CIFAR10DataModule(
        root="./data",
        batch_size=BATCH_SIZE,
        num_workers=8,
        eval_ood=True,
        postprocess_set="test",
    )
    datamodule.prepare_data()
    datamodule.setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0.00/170M [00:00<?, ?B/s]      0%|          | 65.5k/170M [00:00<06:56, 410kB/s]      0%|          | 229k/170M [00:00<03:40, 773kB/s]       0%|          | 623k/170M [00:00<01:50, 1.54MB/s]      1%|          | 1.38M/170M [00:00<00:54, 3.08MB/s]      1%|          | 2.13M/170M [00:00<00:41, 4.10MB/s]      2%|▏         | 4.26M/170M [00:00<00:19, 8.38MB/s]      4%|▎         | 6.19M/170M [00:00<00:15, 10.7MB/s]      7%|▋         | 11.1M/170M [00:01<00:07, 21.0MB/s]      9%|▉         | 14.9M/170M [00:01<00:06, 22.9MB/s]     12%|█▏        | 20.0M/170M [00:01<00:05, 30.0MB/s]     14%|█▍        | 24.6M/170M [00:01<00:04, 30.1MB/s]     17%|█▋        | 29.7M/170M [00:01<00:03, 35.3MB/s]     20%|██        | 34.3M/170M [00:01<00:04, 33.4MB/s]     23%|██▎       | 39.4M/170M [00:01<00:03, 37.7MB/s]     26%|██▌       | 44.1M/170M [00:01<00:03, 35.1MB/s]     29%|██▉       | 49.2M/170M [00:02<00:03, 38.9MB/s]     32%|███▏      | 53.8M/170M [00:02<00:03, 35.8MB/s]     34%|███▍      | 58.8M/170M [00:02<00:02, 39.4MB/s]     37%|███▋      | 63.5M/170M [00:02<00:02, 36.3MB/s]     40%|████      | 68.5M/170M [00:02<00:02, 39.7MB/s]     43%|████▎     | 73.1M/170M [00:02<00:02, 36.3MB/s]     46%|████▌     | 78.2M/170M [00:02<00:02, 39.8MB/s]     49%|████▊     | 83.0M/170M [00:02<00:02, 36.7MB/s]     52%|█████▏    | 88.0M/170M [00:03<00:02, 39.9MB/s]     54%|█████▍    | 92.6M/170M [00:03<00:02, 36.5MB/s]     57%|█████▋    | 97.6M/170M [00:03<00:01, 39.8MB/s]     60%|██████    | 102M/170M [00:03<00:01, 36.7MB/s]      63%|██████▎   | 107M/170M [00:03<00:01, 39.8MB/s]     66%|██████▌   | 112M/170M [00:03<00:01, 36.8MB/s]     69%|██████▊   | 117M/170M [00:03<00:01, 39.9MB/s]     71%|███████▏  | 122M/170M [00:04<00:01, 36.7MB/s]     74%|███████▍  | 127M/170M [00:04<00:01, 39.7MB/s]     77%|███████▋  | 131M/170M [00:04<00:00, 40.9MB/s]     79%|███████▉  | 135M/170M [00:04<00:00, 37.0MB/s]     82%|████████▏ | 140M/170M [00:04<00:00, 39.9MB/s]     85%|████████▍ | 144M/170M [00:04<00:00, 35.7MB/s]     88%|████████▊ | 149M/170M [00:04<00:00, 39.2MB/s]     90%|█████████ | 154M/170M [00:04<00:00, 35.9MB/s]     94%|█████████▎| 160M/170M [00:04<00:00, 40.7MB/s]     96%|█████████▌| 164M/170M [00:05<00:00, 36.6MB/s]     99%|█████████▉| 169M/170M [00:05<00:00, 39.8MB/s]    100%|██████████| 170M/170M [00:05<00:00, 32.3MB/s]
      0%|          | 0.00/64.3M [00:00<?, ?B/s]      0%|          | 32.8k/64.3M [00:00<04:34, 234kB/s]      0%|          | 65.5k/64.3M [00:00<04:36, 233kB/s]      0%|          | 98.3k/64.3M [00:00<04:35, 233kB/s]      0%|          | 131k/64.3M [00:00<04:35, 233kB/s]       0%|          | 197k/64.3M [00:00<03:22, 317kB/s]      0%|          | 295k/64.3M [00:00<02:23, 446kB/s]      1%|          | 393k/64.3M [00:00<02:00, 528kB/s]      1%|          | 557k/64.3M [00:01<01:27, 730kB/s]      1%|          | 721k/64.3M [00:01<01:13, 866kB/s]      2%|▏         | 983k/64.3M [00:01<00:54, 1.17MB/s]      2%|▏         | 1.34M/64.3M [00:01<00:39, 1.59MB/s]      3%|▎         | 1.80M/64.3M [00:01<00:29, 2.10MB/s]      4%|▍         | 2.46M/64.3M [00:01<00:21, 2.87MB/s]      5%|▌         | 3.38M/64.3M [00:01<00:15, 3.97MB/s]      7%|▋         | 4.65M/64.3M [00:02<00:10, 5.49MB/s]     10%|▉         | 6.19M/64.3M [00:02<00:08, 7.14MB/s]     11%|█         | 6.91M/64.3M [00:02<00:08, 6.45MB/s]     14%|█▍        | 8.91M/64.3M [00:02<00:06, 8.86MB/s]     16%|█▌        | 10.1M/64.3M [00:02<00:06, 8.65MB/s]     17%|█▋        | 11.2M/64.3M [00:02<00:06, 8.56MB/s]     19%|█▉        | 12.4M/64.3M [00:02<00:06, 8.50MB/s]     21%|██        | 13.6M/64.3M [00:03<00:05, 8.53MB/s]     23%|██▎       | 14.8M/64.3M [00:03<00:05, 8.56MB/s]     25%|██▌       | 16.1M/64.3M [00:03<00:05, 8.64MB/s]     27%|██▋       | 17.4M/64.3M [00:03<00:05, 8.76MB/s]     29%|██▉       | 18.6M/64.3M [00:03<00:05, 8.86MB/s]     31%|███       | 19.9M/64.3M [00:03<00:04, 9.54MB/s]     33%|███▎      | 21.2M/64.3M [00:03<00:04, 9.47MB/s]     35%|███▌      | 22.6M/64.3M [00:04<00:04, 8.89MB/s]     37%|███▋      | 23.9M/64.3M [00:04<00:04, 9.69MB/s]     39%|███▉      | 25.3M/64.3M [00:04<00:03, 10.6MB/s]     41%|████      | 26.4M/64.3M [00:04<00:03, 10.5MB/s]     43%|████▎     | 27.5M/64.3M [00:04<00:03, 10.2MB/s]     44%|████▍     | 28.5M/64.3M [00:04<00:03, 9.35MB/s]     46%|████▌     | 29.5M/64.3M [00:04<00:04, 8.67MB/s]     48%|████▊     | 30.9M/64.3M [00:04<00:03, 9.06MB/s]     50%|█████     | 32.3M/64.3M [00:05<00:03, 10.0MB/s]     52%|█████▏    | 33.7M/64.3M [00:05<00:03, 10.1MB/s]     55%|█████▍    | 35.2M/64.3M [00:05<00:02, 10.1MB/s]     57%|█████▋    | 36.6M/64.3M [00:05<00:02, 10.2MB/s]     59%|█████▉    | 38.1M/64.3M [00:05<00:02, 9.66MB/s]     62%|██████▏   | 39.6M/64.3M [00:05<00:02, 10.6MB/s]     64%|██████▍   | 41.1M/64.3M [00:05<00:02, 10.7MB/s]     66%|██████▌   | 42.6M/64.3M [00:06<00:02, 10.7MB/s]     69%|██████▊   | 44.1M/64.3M [00:06<00:01, 10.7MB/s]     71%|███████   | 45.6M/64.3M [00:06<00:01, 11.5MB/s]     73%|███████▎  | 46.8M/64.3M [00:06<00:01, 11.4MB/s]     75%|███████▍  | 47.9M/64.3M [00:06<00:01, 11.1MB/s]     76%|███████▋  | 49.1M/64.3M [00:06<00:01, 10.2MB/s]     78%|███████▊  | 50.2M/64.3M [00:06<00:01, 10.3MB/s]     80%|████████  | 51.7M/64.3M [00:06<00:01, 10.6MB/s]     83%|████████▎ | 53.3M/64.3M [00:06<00:00, 11.7MB/s]     85%|████████▍ | 54.5M/64.3M [00:07<00:00, 11.6MB/s]     87%|████████▋ | 55.7M/64.3M [00:07<00:00, 11.2MB/s]     88%|████████▊ | 56.8M/64.3M [00:07<00:00, 10.3MB/s]     90%|█████████ | 58.0M/64.3M [00:07<00:00, 9.76MB/s]     93%|█████████▎| 59.6M/64.3M [00:07<00:00, 10.2MB/s]     95%|█████████▌| 61.1M/64.3M [00:07<00:00, 11.4MB/s]     98%|█████████▊| 62.7M/64.3M [00:07<00:00, 11.4MB/s]    100%|██████████| 64.3M/64.3M [00:07<00:00, 8.10MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 57-59

3. Define the Lightning Trainer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: Python


    trainer = TUTrainer(accelerator="gpu", devices=1, max_epochs=5, enable_progress_bar=False)









.. GENERATED FROM PYTHON SOURCE LINES 64-66

4. Function to Visualize the Prediction Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 66-87

.. code-block:: Python



    def visualize_prediction_sets(inputs, labels, confidence_scores, classes, num_examples=5) -> None:
        _, axs = plt.subplots(2, num_examples, figsize=(15, 5))
        for i in range(num_examples):
            ax = axs[0, i]
            img = np.clip(
                inputs[i].permute(1, 2, 0).cpu().numpy() * datamodule.std + datamodule.mean, 0, 1
            )
            ax.imshow(img)
            ax.set_title(f"True: {classes[labels[i]]}")
            ax.axis("off")
            ax = axs[1, i]
            for j in range(len(classes)):
                ax.barh(classes[j], confidence_scores[i, j], color="blue")
            ax.set_xlim(0, 1)
            ax.set_xlabel("Confidence Score")
        plt.tight_layout()
        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 88-92

5. Estimate Prediction Sets with ConformalClsTHR
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using alpha=0.01, we aim for a 1% error rate.

.. GENERATED FROM PYTHON SOURCE LINES 92-106

.. code-block:: Python


    print("[Phase 2]: ConformalClsTHR calibration")
    conformal_model = ConformalClsTHR(alpha=0.01, device="cuda")

    routine_thr = ClassificationRoutine(
        num_classes=10,
        model=model,
        loss=None,  # No loss needed for evaluation
        eval_ood=True,
        post_processing=conformal_model,
        ood_criterion="post_processing",
    )
    perf_thr = trainer.test(routine_thr, datamodule=datamodule)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Phase 2]: ConformalClsTHR calibration
      0%|          | 0/79 [00:00<?, ?it/s]      1%|▏         | 1/79 [00:00<00:21,  3.67it/s]     10%|█         | 8/79 [00:00<00:02, 25.66it/s]     18%|█▊        | 14/79 [00:00<00:01, 36.09it/s]     25%|██▌       | 20/79 [00:00<00:01, 43.13it/s]     33%|███▎      | 26/79 [00:00<00:01, 47.90it/s]     41%|████      | 32/79 [00:00<00:00, 51.10it/s]     48%|████▊     | 38/79 [00:00<00:00, 53.31it/s]     56%|█████▌    | 44/79 [00:01<00:00, 54.80it/s]     63%|██████▎   | 50/79 [00:01<00:00, 55.84it/s]     71%|███████   | 56/79 [00:01<00:00, 56.57it/s]     78%|███████▊  | 62/79 [00:01<00:00, 57.10it/s]     86%|████████▌ | 68/79 [00:01<00:00, 57.46it/s]     94%|█████████▎| 74/79 [00:01<00:00, 57.70it/s]    100%|██████████| 79/79 [00:01<00:00, 49.08it/s]
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Classification       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     Acc      │          93.380%          │
    │    Brier     │          0.10812          │
    │   Entropy    │          0.08849          │
    │     NLL      │          0.26405          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Calibration        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     ECE      │          3.537%           │
    │     aECE     │          3.499%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃       OOD Detection       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     AUPR     │          86.587%          │
    │    AUROC     │          79.260%          │
    │   Entropy    │          0.08849          │
    │    FPR95     │         100.000%          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃ Selective Classification  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          0.779%           │
    │     AURC     │          0.959%           │
    │  Cov@5Risk   │          96.510%          │
    │  Risk@80Cov  │          1.200%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Post-Processing      ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │ CoverageRate │          0.99000          │
    │   SetSize    │          1.52340          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Complexity         ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    flops     │         142.19 G          │
    │    params    │          11.17 M          │
    └──────────────┴───────────────────────────┘




.. GENERATED FROM PYTHON SOURCE LINES 107-109

6. Visualization of ConformalClsTHR prediction sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 109-119

.. code-block:: Python


    inputs, labels = next(iter(datamodule.test_dataloader()[0]))

    conformal_model.cuda()
    confidence_scores = conformal_model.conformal(inputs.cuda())

    classes = datamodule.test.classes

    visualize_prediction_sets(inputs, labels, confidence_scores[:5].cpu(), classes)




.. image-sg:: /auto_tutorials/Post_Hoc_Methods/images/sphx_glr_tutorial_conformal_001.png
   :alt: True: cat, True: ship, True: ship, True: airplane, True: frog
   :srcset: /auto_tutorials/Post_Hoc_Methods/images/sphx_glr_tutorial_conformal_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-122

7. Estimate Prediction Sets with ConformalClsAPS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 122-139

.. code-block:: Python


    print("[Phase 3]: ConformalClsAPS calibration")
    conformal_model = ConformalClsAPS(alpha=0.01, device="cuda", enable_ts=False)

    routine_aps = ClassificationRoutine(
        num_classes=10,
        model=model,
        loss=None,  # No loss needed for evaluation
        eval_ood=True,
        post_processing=conformal_model,
        ood_criterion="post_processing",
    )
    perf_aps = trainer.test(routine_aps, datamodule=datamodule)
    conformal_model.cuda()
    confidence_scores = conformal_model.conformal(inputs.cuda())
    visualize_prediction_sets(inputs, labels, confidence_scores[:5].cpu(), classes)




.. image-sg:: /auto_tutorials/Post_Hoc_Methods/images/sphx_glr_tutorial_conformal_002.png
   :alt: True: cat, True: ship, True: ship, True: airplane, True: frog
   :srcset: /auto_tutorials/Post_Hoc_Methods/images/sphx_glr_tutorial_conformal_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Phase 3]: ConformalClsAPS calibration
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Classification       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     Acc      │          93.380%          │
    │    Brier     │          0.10812          │
    │   Entropy    │          0.08849          │
    │     NLL      │          0.26405          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Calibration        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     ECE      │          3.537%           │
    │     aECE     │          3.499%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃       OOD Detection       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     AUPR     │          84.802%          │
    │    AUROC     │          77.028%          │
    │   Entropy    │          0.08849          │
    │    FPR95     │         100.000%          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃ Selective Classification  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          0.779%           │
    │     AURC     │          0.959%           │
    │  Cov@5Risk   │          96.510%          │
    │  Risk@80Cov  │          1.200%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Post-Processing      ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │ CoverageRate │          0.99090          │
    │   SetSize    │          1.78550          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Complexity         ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    flops     │         142.19 G          │
    │    params    │          11.17 M          │
    └──────────────┴───────────────────────────┘




.. GENERATED FROM PYTHON SOURCE LINES 140-142

8. Estimate Prediction Sets with ConformalClsRAPS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 142-161

.. code-block:: Python


    print("[Phase 4]: ConformalClsRAPS calibration")
    conformal_model = ConformalClsRAPS(
        alpha=0.01, regularization_rank=3, penalty=0.002, model=model, device="cuda", enable_ts=False
    )

    routine_raps = ClassificationRoutine(
        num_classes=10,
        model=model,
        loss=None,  # No loss needed for evaluation
        eval_ood=True,
        post_processing=conformal_model,
        ood_criterion="post_processing",
    )
    perf_raps = trainer.test(routine_raps, datamodule=datamodule)
    conformal_model.cuda()
    confidence_scores = conformal_model.conformal(inputs.cuda())
    visualize_prediction_sets(inputs, labels, confidence_scores[:5].cpu(), classes)




.. image-sg:: /auto_tutorials/Post_Hoc_Methods/images/sphx_glr_tutorial_conformal_003.png
   :alt: True: cat, True: ship, True: ship, True: airplane, True: frog
   :srcset: /auto_tutorials/Post_Hoc_Methods/images/sphx_glr_tutorial_conformal_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Phase 4]: ConformalClsRAPS calibration
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Classification       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     Acc      │          93.380%          │
    │    Brier     │          0.10812          │
    │   Entropy    │          0.08849          │
    │     NLL      │          0.26405          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Calibration        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     ECE      │          3.537%           │
    │     aECE     │          3.499%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃       OOD Detection       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     AUPR     │          85.656%          │
    │    AUROC     │          77.703%          │
    │   Entropy    │          0.08849          │
    │    FPR95     │         100.000%          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃ Selective Classification  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          0.779%           │
    │     AURC     │          0.959%           │
    │  Cov@5Risk   │          96.510%          │
    │  Risk@80Cov  │          1.200%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Post-Processing      ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │ CoverageRate │          0.99030          │
    │   SetSize    │          1.65800          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Complexity         ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    flops     │         142.19 G          │
    │    params    │          11.17 M          │
    └──────────────┴───────────────────────────┘




.. GENERATED FROM PYTHON SOURCE LINES 162-169

Summary
-------

In this tutorial, we explored how to apply conformal prediction to a pretrained ResNet on CIFAR-10.
We evaluated three methods: Thresholding (THR), Adaptive Prediction Sets (APS), and Regularized APS (RAPS).
For each, we calibrated on a validation set, evaluated OOD performance, and visualized prediction sets.
You can explore further by adjusting `alpha`, changing the model, or testing on other datasets.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 2.584 seconds)


.. _sphx_glr_download_auto_tutorials_Post_Hoc_Methods_tutorial_conformal.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_conformal.ipynb <tutorial_conformal.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_conformal.py <tutorial_conformal.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: tutorial_conformal.zip <tutorial_conformal.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
