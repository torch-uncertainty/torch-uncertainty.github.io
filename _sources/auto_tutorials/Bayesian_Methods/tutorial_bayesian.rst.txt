
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/Bayesian_Methods/tutorial_bayesian.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_Bayesian_Methods_tutorial_bayesian.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_Bayesian_Methods_tutorial_bayesian.py:


Train a Bayesian Neural Network in Three Minutes
================================================

In this tutorial, we will train a variational inference Bayesian Neural Network (BNN) LeNet classifier on the MNIST dataset.

Foreword on Bayesian Neural Networks
------------------------------------

Bayesian Neural Networks (BNNs) are a class of neural networks that estimate the uncertainty on their predictions via uncertainty
on their weights. This is achieved by considering the weights of the neural network as random variables, and by learning their
posterior distribution. This is in contrast to standard neural networks, which only learn a single set of weights, which can be
seen as Dirac distributions on the weights.

For more information on Bayesian Neural Networks, we refer the reader to the following resources:

- Weight Uncertainty in Neural Networks `ICML2015 <https://arxiv.org/pdf/1505.05424.pdf>`_
- Hands-on Bayesian Neural Networks - a Tutorial for Deep Learning Users `IEEE Computational Intelligence Magazine <https://arxiv.org/pdf/2007.06823.pdf>`_

Training a Bayesian LeNet using TorchUncertainty models and Lightning
---------------------------------------------------------------------

In this part, we train a Bayesian LeNet, based on the model and routines already implemented in TU.

1. Loading the utilities
~~~~~~~~~~~~~~~~~~~~~~~~

To train a BNN using TorchUncertainty, we have to load the following modules:

- our TUTrainer
- the model: bayesian_lenet, which lies in the torch_uncertainty.model
- the classification training routine from torch_uncertainty.routines
- the Bayesian objective: the ELBOLoss, which lies in the torch_uncertainty.losses file
- the datamodule that handles dataloaders: MNISTDataModule from torch_uncertainty.datamodules

We will also need to define an optimizer using torch.optim and Pytorch's
neural network utils from torch.nn.

.. GENERATED FROM PYTHON SOURCE LINES 42-52

.. code-block:: Python

    from pathlib import Path

    from torch import nn, optim

    from torch_uncertainty import TUTrainer
    from torch_uncertainty.datamodules import MNISTDataModule
    from torch_uncertainty.losses import ELBOLoss
    from torch_uncertainty.models.classification import bayesian_lenet
    from torch_uncertainty.routines import ClassificationRoutine








.. GENERATED FROM PYTHON SOURCE LINES 53-60

2. Creating the necessary variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following, we instantiate our trainer, define the root of the datasets and the logs.
We also create the datamodule that handles the MNIST dataset, dataloaders and transforms.
Please note that the datamodules can also handle OOD detection by setting the eval_ood
parameter to True. Finally, we create the model using the blueprint from torch_uncertainty.models.

.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: Python


    trainer = TUTrainer(accelerator="gpu", devices=1, enable_progress_bar=False, max_epochs=1)

    # datamodule
    root = Path("data")
    datamodule = MNISTDataModule(root=root, batch_size=128, eval_ood=False)

    # model
    model = bayesian_lenet(datamodule.num_channels, datamodule.num_classes)








.. GENERATED FROM PYTHON SOURCE LINES 71-82

3. The Loss and the Training Routine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Then, we just have to define the loss to be used during training. To do this,
we redefine the default parameters from the ELBO loss using the partial
function from functools. We use the hyperparameters proposed in the blitz
library. As we are train a classification model, we use the CrossEntropyLoss
as the likelihood.
We then define the training routine using the classification training routine
from torch_uncertainty.classification. We provide the model, the ELBO
loss and the optimizer to the routine.
We will use the Adam optimizer with the default learning rate of 0.001.

.. GENERATED FROM PYTHON SOURCE LINES 82-101

.. code-block:: Python


    loss = ELBOLoss(
        model=model,
        inner_loss=nn.CrossEntropyLoss(),
        kl_weight=1 / 10000,
        num_samples=3,
    )

    routine = ClassificationRoutine(
        model=model,
        num_classes=datamodule.num_classes,
        loss=loss,
        optim_recipe=optim.Adam(
            model.parameters(),
            lr=1e-3,
        ),
        is_ensemble=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 102-111

4. Gathering Everything and Training the Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that we have prepared all of this, we just have to gather everything in
the main function and to train the model using our wrapper of Lightning Trainer.
Specifically, it needs the routine, that includes the model as well as the
training/eval logic and the datamodule
The dataset will be downloaded automatically in the root/data folder, and the
logs will be saved in the root/logs folder.

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: Python


    trainer.fit(model=routine, datamodule=datamodule)
    trainer.test(model=routine, datamodule=datamodule)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0.00/9.91M [00:00<?, ?B/s]      1%|          | 98.3k/9.91M [00:00<00:15, 626kB/s]      4%|▎         | 360k/9.91M [00:00<00:07, 1.24MB/s]     10%|█         | 1.02M/9.91M [00:00<00:03, 2.90MB/s]     15%|█▍        | 1.44M/9.91M [00:00<00:02, 3.17MB/s]     33%|███▎      | 3.24M/9.91M [00:00<00:00, 7.31MB/s]     62%|██████▏   | 6.19M/9.91M [00:00<00:00, 13.0MB/s]    100%|██████████| 9.91M/9.91M [00:00<00:00, 11.3MB/s]
      0%|          | 0.00/28.9k [00:00<?, ?B/s]    100%|██████████| 28.9k/28.9k [00:00<00:00, 373kB/s]
      0%|          | 0.00/1.65M [00:00<?, ?B/s]      4%|▍         | 65.5k/1.65M [00:00<00:03, 419kB/s]     22%|██▏       | 360k/1.65M [00:00<00:01, 1.28MB/s]     52%|█████▏    | 852k/1.65M [00:00<00:00, 2.43MB/s]     93%|█████████▎| 1.54M/1.65M [00:00<00:00, 3.61MB/s]    100%|██████████| 1.65M/1.65M [00:00<00:00, 2.99MB/s]
      0%|          | 0.00/4.54k [00:00<?, ?B/s]    100%|██████████| 4.54k/4.54k [00:00<00:00, 9.87MB/s]
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃      Classification       ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     Acc      │          95.210%          │
    │    Brier     │          0.07424          │
    │   Entropy    │          0.20762          │
    │     NLL      │          0.16047          │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃        Calibration        ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │     ECE      │          1.728%           │
    │     aECE     │          1.728%           │
    └──────────────┴───────────────────────────┘
    ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    ┃ Test metric  ┃ Selective Classification  ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    │    AUGRC     │          0.412%           │
    │     AURC     │          0.467%           │
    │  Cov@5Risk   │         100.000%          │
    │  Risk@80Cov  │          0.600%           │
    └──────────────┴───────────────────────────┘

    [{'test/cal/ECE': 0.017277222126722336, 'test/cal/aECE': 0.017277222126722336, 'test/cls/Acc': 0.9520999789237976, 'test/cls/Brier': 0.074241504073143, 'test/cls/NLL': 0.1604684740304947, 'test/sc/AUGRC': 0.004121227655559778, 'test/sc/AURC': 0.004667955916374922, 'test/sc/Cov@5Risk': 1.0, 'test/sc/Risk@80Cov': 0.006000000052154064, 'test/cls/Entropy': 0.20761831104755402, 'test/ens_Disagreement': 0.00745416572317481, 'test/ens_Entropy': 0.20662963390350342, 'test/ens_MI': 0.0009886363986879587}]



.. GENERATED FROM PYTHON SOURCE LINES 116-123

5. Testing the Model
~~~~~~~~~~~~~~~~~~~~

Now that the model is trained, let's test it on MNIST.
Please note that we apply a reshape to the logits to determine the dimension corresponding to the ensemble
and to the batch. As for TorchUncertainty 0.2.0, the ensemble dimension is merged with the batch dimension
in this order (num_estimator x batch, classes).

.. GENERATED FROM PYTHON SOURCE LINES 123-160

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    import torchvision


    def imshow(img) -> None:
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))
        plt.axis("off")
        plt.tight_layout()
        plt.show()


    dataiter = iter(datamodule.val_dataloader())
    images, labels = next(dataiter)

    # print images
    imshow(torchvision.utils.make_grid(images[:4, ...]))
    print("Ground truth: ", " ".join(f"{labels[j]}" for j in range(4)))

    # Put the model in eval mode to use several samples
    model = model.eval()
    logits = model(images).reshape(16, 128, 10)  # num_estimators, batch_size, num_classes

    # We apply the softmax on the classes and average over the estimators
    probs = torch.nn.functional.softmax(logits, dim=-1)
    avg_probs = probs.mean(dim=0)
    var_probs = probs.std(dim=0)

    _, predicted = torch.max(avg_probs, 1)

    print("Predicted digits: ", " ".join(f"{predicted[j]}" for j in range(4)))
    print(
        "Std. dev. of the scores over the posterior samples",
        " ".join(f"{var_probs[j][predicted[j]]:.3}" for j in range(4)),
    )



.. image-sg:: /auto_tutorials/Bayesian_Methods/images/sphx_glr_tutorial_bayesian_001.png
   :alt: tutorial bayesian
   :srcset: /auto_tutorials/Bayesian_Methods/images/sphx_glr_tutorial_bayesian_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ground truth:  7 2 1 0
    Predicted digits:  7 2 1 0
    Std. dev. of the scores over the posterior samples 0.000456 0.000133 0.00123 0.00767




.. GENERATED FROM PYTHON SOURCE LINES 161-171

Here, we show the variance of the top prediction. This is a non-standard but intuitive way to show the diversity of the predictions
of the ensemble. Ideally, the variance should be high when the average top prediction is incorrect.

References
----------

- **LeNet & MNIST:** LeCun, Y., Bottou, L., Bengio, Y., & Haffner, P. (1998). Gradient-based learning applied to document recognition. `Proceedings of the IEEE <http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf>`_.
- **Bayesian Neural Networks:** Blundell, C., Cornebise, J., Kavukcuoglu, K., & Wierstra, D. (2015). Weight Uncertainty in Neural Networks. `ICML 2015 <https://arxiv.org/pdf/1505.05424.pdf>`_.
- **The Adam optimizer:** Kingma, D. P., & Ba, J. (2014). "Adam: A method for stochastic optimization." `ICLR 2015 <https://arxiv.org/pdf/1412.6980.pdf>`_.
- **The Blitz** `library <https://github.com/piEsposito/blitz-bayesian-deep-learning>`_ (for the hyperparameters).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.734 seconds)


.. _sphx_glr_download_auto_tutorials_Bayesian_Methods_tutorial_bayesian.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_bayesian.ipynb <tutorial_bayesian.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_bayesian.py <tutorial_bayesian.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: tutorial_bayesian.zip <tutorial_bayesian.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
