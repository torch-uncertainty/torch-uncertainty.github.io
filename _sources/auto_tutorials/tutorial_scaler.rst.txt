
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_scaler.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorial_scaler.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_scaler.py:


Improve Top-label Calibration with Temperature Scaling
======================================================

In this tutorial, we use *TorchUncertainty* to improve the calibration
of the top-label predictions
and the reliability of the underlying neural network.

We also see how to use the datamodules outside any Lightning trainers, 
and how to use TorchUncertainty's models.

1. Loading the Utilities
~~~~~~~~~~~~~~~~~~~~~~~~

In this tutorial, we will need:

- torch for its objects
- the "calibration error" metric to compute the ECE and evaluate the top-label calibration
- the CIFAR-100 datamodule to handle the data
- a ResNet 18 as starting model 
- the temperature scaler to improve the top-label calibration
- a utility to download hf models easily
- the calibration plot to visualize the calibration. If you use the classification routine, 
    the plots will be automatically available in the tensorboard logs.

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: Python


    from torch_uncertainty.datamodules import CIFAR100DataModule
    from torch_uncertainty.metrics import CE
    from torch_uncertainty.models.resnet import resnet18
    from torch_uncertainty.post_processing import TemperatureScaler
    from torch_uncertainty.utils import load_hf








.. GENERATED FROM PYTHON SOURCE LINES 34-39

2. Loading a model from TorchUncertainty's HF
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To avoid training a model on CIFAR-100 from scratch, we load a model from Hugging Face.
This can be done in a one liner:

.. GENERATED FROM PYTHON SOURCE LINES 39-49

.. code-block:: Python


    # Build the model
    model = resnet18(in_channels=3, num_classes=100, style="cifar", conv_bias=False)

    # Download the weights (the config is not used here)
    weights, config = load_hf("resnet18_c100")

    # Load the weights in the pre-built model
    model.load_state_dict(weights)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    resnet18_c100.ckpt:   0%|          | 0.00/45.0M [00:00<?, ?B/s]    resnet18_c100.ckpt:  23%|██▎       | 10.5M/45.0M [00:00<00:01, 18.0MB/s]    resnet18_c100.ckpt:  47%|████▋     | 21.0M/45.0M [00:00<00:00, 31.2MB/s]    resnet18_c100.ckpt:  70%|██████▉   | 31.5M/45.0M [00:00<00:00, 39.6MB/s]    resnet18_c100.ckpt:  93%|█████████▎| 41.9M/45.0M [00:01<00:00, 44.0MB/s]    resnet18_c100.ckpt: 100%|██████████| 45.0M/45.0M [00:01<00:00, 37.9MB/s]
    config.yaml:   0%|          | 0.00/1.30k [00:00<?, ?B/s]    config.yaml: 100%|██████████| 1.30k/1.30k [00:00<00:00, 9.25MB/s]

    <All keys matched successfully>



.. GENERATED FROM PYTHON SOURCE LINES 50-56

3. Setting up the Datamodule and Dataloaders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To get the dataloader from the datamodule, just call prepare_data, setup, and
extract the first element of the test dataloader list. There are more than one
element if `:attr:eval_ood` is True.

.. GENERATED FROM PYTHON SOURCE LINES 56-65

.. code-block:: Python


    dm = CIFAR100DataModule(root="./data", eval_ood=False, batch_size=32)
    dm.prepare_data()
    dm.setup("test")

    # Get the full test dataloader (unused in this tutorial)
    dataloader = dm.test_dataloader()[0]






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz to data/cifar-100-python.tar.gz
      0%|          | 0/169001437 [00:00<?, ?it/s]      0%|          | 32768/169001437 [00:00<11:41, 240892.33it/s]      0%|          | 229376/169001437 [00:00<02:58, 943293.54it/s]      1%|          | 884736/169001437 [00:00<00:57, 2913388.74it/s]      2%|▏         | 2916352/169001437 [00:00<00:18, 8824517.77it/s]      4%|▍         | 6651904/169001437 [00:00<00:09, 17802248.53it/s]      6%|▋         | 10584064/169001437 [00:00<00:06, 24552968.35it/s]      9%|▉         | 15925248/169001437 [00:00<00:04, 32938783.97it/s]     12%|█▏        | 19824640/169001437 [00:00<00:04, 34420454.48it/s]     15%|█▍        | 25165824/169001437 [00:01<00:03, 40087503.80it/s]     17%|█▋        | 29261824/169001437 [00:01<00:03, 39494501.05it/s]     20%|█▉        | 33619968/169001437 [00:01<00:03, 40700120.60it/s]     23%|██▎       | 38338560/169001437 [00:01<00:03, 42623292.56it/s]     25%|██▌       | 42663936/169001437 [00:01<00:03, 41172556.13it/s]     28%|██▊       | 47906816/169001437 [00:01<00:02, 42560794.77it/s]     31%|███       | 52199424/169001437 [00:01<00:02, 42441687.45it/s]     34%|███▍      | 57212928/169001437 [00:01<00:02, 44124052.78it/s]     36%|███▋      | 61636608/169001437 [00:01<00:02, 42597542.50it/s]     39%|███▉      | 66617344/169001437 [00:01<00:02, 42673648.95it/s]     42%|████▏     | 70975488/169001437 [00:02<00:02, 42922904.84it/s]     45%|████▍     | 75857920/169001437 [00:02<00:02, 43882183.08it/s]     48%|████▊     | 80281600/169001437 [00:02<00:02, 42609369.84it/s]     50%|█████     | 85164032/169001437 [00:02<00:01, 44328972.84it/s]     53%|█████▎    | 89620480/169001437 [00:02<00:01, 42378601.65it/s]     56%|█████▌    | 94371840/169001437 [00:02<00:01, 43785241.45it/s]     58%|█████▊    | 98795520/169001437 [00:02<00:01, 42198273.38it/s]     61%|██████    | 103415808/169001437 [00:02<00:01, 43290313.88it/s]     64%|██████▍   | 107970560/169001437 [00:02<00:01, 43324281.47it/s]     67%|██████▋   | 112656384/169001437 [00:03<00:01, 44122230.20it/s]     69%|██████▉   | 117211136/169001437 [00:03<00:01, 44522262.98it/s]     72%|███████▏  | 121700352/169001437 [00:03<00:01, 43116224.67it/s]     75%|███████▍  | 126287872/169001437 [00:03<00:00, 43889397.06it/s]     77%|███████▋  | 130711552/169001437 [00:03<00:00, 42190323.24it/s]     80%|████████  | 135495680/169001437 [00:03<00:00, 43784089.24it/s]     83%|████████▎ | 139919360/169001437 [00:03<00:00, 41929132.99it/s]     86%|████████▌ | 144736256/169001437 [00:03<00:00, 43663355.74it/s]     88%|████████▊ | 149159936/169001437 [00:03<00:00, 42893651.54it/s]     91%|█████████ | 153878528/169001437 [00:03<00:00, 44110361.35it/s]     94%|█████████▎| 158334976/169001437 [00:04<00:00, 44022409.58it/s]     96%|█████████▋| 162758656/169001437 [00:04<00:00, 42740701.62it/s]     99%|█████████▉| 167477248/169001437 [00:04<00:00, 44008878.07it/s]    100%|██████████| 169001437/169001437 [00:04<00:00, 38934492.95it/s]
    Extracting data/cifar-100-python.tar.gz to data
    Files already downloaded and verified




.. GENERATED FROM PYTHON SOURCE LINES 66-76

4. Iterating on the Dataloader and Computing the ECE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We first split the original test set into a calibration set and a test set for proper evaluation.

When computing the ECE, you need to provide the likelihoods associated with the inputs.
To do this, just call PyTorch's softmax.

To avoid lengthy computations (without GPU), we restrict the calibration computation to a subset
of the test set.

.. GENERATED FROM PYTHON SOURCE LINES 76-99

.. code-block:: Python


    from torch.utils.data import DataLoader, random_split

    # Split datasets
    dataset = dm.test
    cal_dataset, test_dataset, other = random_split(
        dataset, [1000, 1000, len(dataset) - 2000]
    )
    test_dataloader = DataLoader(test_dataset, batch_size=32)

    # Initialize the ECE
    ece = CE(task="multiclass", num_classes=100)

    # Iterate on the calibration dataloader
    for sample, target in test_dataloader:
        logits = model(sample)
        probs = logits.softmax(-1)
        ece.update(probs, target)

    # Compute & print the calibration error
    cal = ece.compute()
    print(f"ECE before scaling - {cal*100:.3}%.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ECE before scaling - 11.5%.




.. GENERATED FROM PYTHON SOURCE LINES 100-102

We also compute and plot the top-label calibration figure. We see that the
model is not well calibrated.

.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: Python

    fig, ax = ece.plot()
    fig.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_scaler_001.png
   :alt: tutorial scaler
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_scaler_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-113

5. Fitting the Scaler to Improve the Calibration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The TemperatureScaler has one parameter that can be used to temper the softmax.
We minimize the tempered cross-entropy on a calibration set that we define here as
a subset of the test set and containing 1000 data. Look at the code run by TemperatureScaler
`fit` method for more details.

.. GENERATED FROM PYTHON SOURCE LINES 113-118

.. code-block:: Python


    # Fit the scaler on the calibration dataset
    scaled_model = TemperatureScaler(model=model)
    scaled_model = scaled_model.fit(calibration_set=cal_dataset)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/32 [00:00<?, ?it/s]      3%|▎         | 1/32 [00:00<00:07,  3.97it/s]      6%|▋         | 2/32 [00:00<00:07,  4.04it/s]      9%|▉         | 3/32 [00:00<00:07,  4.07it/s]     12%|█▎        | 4/32 [00:00<00:06,  4.08it/s]     16%|█▌        | 5/32 [00:01<00:06,  4.08it/s]     19%|█▉        | 6/32 [00:01<00:06,  4.09it/s]     22%|██▏       | 7/32 [00:01<00:06,  4.09it/s]     25%|██▌       | 8/32 [00:01<00:05,  4.09it/s]     28%|██▊       | 9/32 [00:02<00:05,  4.07it/s]     31%|███▏      | 10/32 [00:02<00:05,  4.08it/s]     34%|███▍      | 11/32 [00:02<00:05,  4.07it/s]     38%|███▊      | 12/32 [00:02<00:04,  4.07it/s]     41%|████      | 13/32 [00:03<00:04,  4.06it/s]     44%|████▍     | 14/32 [00:03<00:04,  4.07it/s]     47%|████▋     | 15/32 [00:03<00:04,  4.08it/s]     50%|█████     | 16/32 [00:03<00:03,  4.08it/s]     53%|█████▎    | 17/32 [00:04<00:03,  4.07it/s]     56%|█████▋    | 18/32 [00:04<00:03,  4.08it/s]     59%|█████▉    | 19/32 [00:04<00:03,  4.08it/s]     62%|██████▎   | 20/32 [00:04<00:02,  4.09it/s]     66%|██████▌   | 21/32 [00:05<00:02,  4.08it/s]     69%|██████▉   | 22/32 [00:05<00:02,  4.09it/s]     72%|███████▏  | 23/32 [00:05<00:02,  4.09it/s]     75%|███████▌  | 24/32 [00:05<00:01,  4.09it/s]     78%|███████▊  | 25/32 [00:06<00:01,  4.08it/s]     81%|████████▏ | 26/32 [00:06<00:01,  4.09it/s]     84%|████████▍ | 27/32 [00:06<00:01,  4.09it/s]     88%|████████▊ | 28/32 [00:06<00:00,  4.10it/s]     91%|█████████ | 29/32 [00:07<00:00,  4.09it/s]     94%|█████████▍| 30/32 [00:07<00:00,  4.09it/s]     97%|█████████▋| 31/32 [00:07<00:00,  4.10it/s]    100%|██████████| 32/32 [00:07<00:00,  4.18it/s]




.. GENERATED FROM PYTHON SOURCE LINES 119-126

6. Iterating Again to Compute the Improved ECE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can directly use the scaler as a calibrated model.

Note that you will need to first reset the ECE metric to avoid mixing the scores of
the previous and current iterations.

.. GENERATED FROM PYTHON SOURCE LINES 126-139

.. code-block:: Python


    # Reset the ECE
    ece.reset()

    # Iterate on the test dataloader
    for sample, target in test_dataloader:
        logits = scaled_model(sample)
        probs = logits.softmax(-1)
        ece.update(probs, target)

    cal = ece.compute()
    print(f"ECE after scaling - {cal*100:.3}%.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ECE after scaling - 2.14%.




.. GENERATED FROM PYTHON SOURCE LINES 140-142

We finally compute and plot the scaled top-label calibration figure. We see
that the model is now better calibrated.

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: Python

    fig, ax = ece.plot()
    fig.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_scaler_002.png
   :alt: tutorial scaler
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_scaler_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-154

The top-label calibration should be improved.

Notes
~~~~~

Temperature scaling is very efficient when the calibration set is representative of the test set.
In this case, we say that the calibration and test set are drawn from the same distribution.
However, this may not hold true in real-world cases where dataset shift could happen.

.. GENERATED FROM PYTHON SOURCE LINES 156-161

References
~~~~~~~~~~

- **Expected Calibration Error:** Naeini, M. P., Cooper, G. F., & Hauskrecht, M. (2015). Obtaining Well Calibrated Probabilities Using Bayesian Binning. In `AAAI 2015 <https://arxiv.org/pdf/1411.0160.pdf>`_.
- **Temperature Scaling:** Guo, C., Pleiss, G., Sun, Y., & Weinberger, K. Q. (2017). On calibration of modern neural networks. In `ICML 2017 <https://arxiv.org/pdf/1706.04599.pdf>`_.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 33.510 seconds)


.. _sphx_glr_download_auto_tutorials_tutorial_scaler.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_scaler.ipynb <tutorial_scaler.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_scaler.py <tutorial_scaler.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
